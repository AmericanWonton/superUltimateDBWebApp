{{/* ****** BEGINNING OF HEAD SECTION ********/}}
{{define "meta-title"}}
    <meta charset="UTF-8">
    <title>Ultimate Database</title>
{{end}}

{{define "pixel-dense"}}
    <meta name="viewport" content="width=device-width, initial-scale=1">
{{end}}

{{define "fav-icon1"}}
    <link rel="shortcut icon" type="image/png" href="static/images/favicons/database.png">
{{end}}

{{define "fonts1"}}
    <link href="https://fonts.googleapis.com/css?family=Bebas+Neue|Bowlby+One+SC|Dosis|Nunito|Odibee+Sans|Open+Sans+Condensed:300&display=swap" rel="stylesheet">
{{end}}

{{define "media-queries"}}
    <link rel="stylesheet" type="text/css" href="static/css/main.css">
    <link rel="stylesheet" type="text/css" href="static/css/styling.css">
    <link rel="stylesheet" type="text/css" media="(min-width: 600px)" href="static/css/mq_600.css">
    <link rel="stylesheet" type="text/css" media="(min-width: 900px)" href="static/css/mq_900.css">
    <link rel="stylesheet" type="text/css" media="(min-width: 1500px)" href="static/css/mq_1500.css">
{{end}}

{{define "javascript"}}
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js"></script>
    <script src="https://ajax.aspnetcdn.com/ajax/jQuery/jquery-3.4.1.min.js"></script>
{{end}}

{{/******* END OF HEAD SECTION *****/}}

{{/******** BEGINNING OF HEADER SECTION ********/}}
{{define "header_div"}}
    <header>
        <div class="header_div">
            <div class="drop-down-link-divs">
                <div class="nothing_box">
                    
                </div>
                <div class="about_box">
                    <a href="index.html" class="headerLinks">About Me</a>
                </div>
                <div class="link_box">
                    <div class="dropdown">
                        <button class="dropbtn">Check Out My Work!</button>
                        <div class="dropdown-content">
                            <a href="gallery.gohtml" class="headerLinks">Event Gallery</a>
                            <a href="" class="headerLinks">DJ Mark Mixes(COMING SOON!)</a>
                        </div>
                    </div>
                </div>
                <div class="contact_me_box">
                    <a href="bookdjmark.gohtml" class="headerLinks">Book DJ Mark</a>
                </div>
            </div>
        </div>
    </header>
{{end}}
{{define "index_header"}}
    <header>
        <div class="header_selectDiv">
            {{/******** Define both clickable links to other pages ********/}}
            <div class="theContactDiv" onclick="navigateHeader(1)">
                <p class="contactP">Contact the Dev</p>
            </div>
            <div class="theDocumentationDiv" onclick="navigateHeader(2)">
                <p class="documentationP">Documentation</p>
            </div>
        </div>
    </header>
{{end}}
{{define "contact_dev_header"}}
    <header>
        <div class="header_ContactDiv">
            <h1 class="contactH1">
                Contact the Dev
            </h1>
        </div>
    </header>
{{end}}
{{define "documentation_header"}}
    <header>
        <div class="header_selectDiv">
            {{/******** Define both clickable links to other pages ********/}}
            <div class="theContactDiv" onclick="navigateHeader(5)">
                <p class="contactP">Back to Login</p>
            </div>
        </div>
    </header>
{{end}}
{{define "mainpage_header"}}
    <header>
        <div class="header_selectDiv">
            {{/******** Define both clickable links to other pages ********/}}
            <div class="theContactDiv" onclick="navigateHeader(5)">
                <p class="contactP">Back to Login</p>
            </div>
            <div class="errordisplayer_div" id="errordisplayer_div">
                <div class="errorDisplayPDiv">
                    <p class="errordisplayer_p" id="errordisplayer_p">
                    
                    </p>
                </div>
                <div class="errorDisplayImgDiv">
                    <img class="errImg" src="static/images/svg/checkmark.svg" id="errImg"
                    onclick="hideErrorDiv()">
                </div>
            </div>
        </div>
    </header>
{{end}}
{{/******** END OF HEADER SECTION ********/}}

{{/******** BEGINNING OF BODY SECTION *********/}}
{{define "documentation_intro"}}
    <div class="documentationIntroDiv">
        <div class="greetingDiv">
            <div class="spheleDiv">
                <p class="spheleP">
                    Hello and welcome to the SuperDBWebApp. I'm Joseph Keller, the web Dev
                    behind this site!
                </p>
                <p class="spheleP">
                    The purpose of this site is to test and demonstrate various Web Development
                    and DevOps technologies. These include Docker, MongoDB, mySQL, Javascript,
                    Amazon AWS Storage APIs, Google APIs, Cronjobs, Golang, and plenty more
                    to come!
                </p>
                <p class="spheleP">
                    I've laid out steps to building this web app below, with links to documentation
                    and videos to each section. If you have a question on any of these topics, please 
                    feel free to email me in the 'Contact' section. You can also feel free to 
                    check out this project from git, here:
                </p>
                <p class="spheleP">
                    <a class="linkA" href="https://github.com/AmericanWonton/superUltimateDBWebApp"
                    target="_blank" alt="Github Project Link">
                        <img alt="Github Project Link" src="static/images/svg/github_pic.svg"
                        class="linkPictures">
                    </a>
                </p>
                <p class="spheleP">
                    If you like what you see, feel free to check out my 
                    <a class="linkA" href="http://josephkeller.me/"
                    target="_blank" alt="My website">website!</a>
                </p>
            </div>
        </div>
    </div>
{{end}}
{{define "documentation_documents_block"}}
    <div class="documentations_block_div">
        {{/* PROJECT LOCATIONS */}}
        <div class="documentation_section_div">
            <div class="header_opening_div">
                <h2 class="header_opening_h2" id="hedOpen7" onclick="documentDivDisplay(7)">
                    Project Locations
                </h2>
            </div>
            <div class="body_opening_div" id="bodOpen7">
                <div class="text_body_div">
                    <p class="text_body_p">
                        This project is actually split in two; one for the <a class="linkA"
                        href="https://github.com/AmericanWonton/superUltimateDBWebApp"
                        target="_blank" alt="SuperDBWebApp Git">‘SuperDBWebApp’</a>,
                         (which hosts a data API you can connect to AND the app you’re clicking through)
                          and the other is for the <a class="linkA"
                        href="https://github.com/AmericanWonton/superDBAutomation"
                        target="_blank" alt="SuperDBAutomation Git">‘SuperDBAutomation’</a> Project, 
                          (which gives this project test data to work with on a Cronjob
                           and logs the results on the application server). Give them both
                            a look and let me know what you think! You can also check the
                             <a class="linkA"
                        href="https://trello.com/b/nE6bFs8s/superdbwebapp"
                        target="_blank" alt="Trello Board">‘SuperDBWebApp’</a>
                         board on Trello to get a sense of what I’m adding next.
                    </p>
                </div>
            </div>
        </div>
        {{/* HTML, CSS, GOLANG WEBDEV */}}
        <div class="documentation_section_div">
            <div class="header_opening_div">
                <h2 class="header_opening_h2" id="hedOpen1" onclick="documentDivDisplay(1)">
                    HTML, CSS, and Golang WebDev
                </h2>
            </div>
            <div class="body_opening_div" id="bodOpen1">
                <div class="text_body_div">
                    <p class="text_body_p">
                        For basic web-dev skills, I’ve got to hand it to Todd McLeod.
                        Golang is a nifty language for building websites and APIS, but it can be
                        intimidating learning some of the newer concepts that take advantage of
                        GoRoutines and Concurrent patterns for faster delivery. Todd is a fun,
                        energetic teacher and he makes use of widely seen use-case scenarios
                        for developers. Check out his lessons on <a class="linkA"
                        href="https://www.udemy.com/course/learn-how-to-code/"
                        target="_blank" alt="Todd Golang">Golang</a>, <a class="linkA"
                        href="https://www.udemy.com/course/html-tutorial/"
                        target="_blank" alt="Todd HTML and CSS">Creating a Website</a>, and
                        <a class="linkA" href="https://www.udemy.com/course/go-programming-language/"
                        target="_blank" alt="Todd Golang WebDev">WebDev with Golang</a>.
                    </p>
                </div>
            </div>
        </div>
        {{/* DOCKER AND DOCKER HUB */}}
        <div class="documentation_section_div">
            <div class="header_opening_div">
                <h2 class="header_opening_h2" id="hedOpen2" onclick="documentDivDisplay(2)">
                    Docker
                </h2>
            </div>
            <div class="body_opening_div" id="bodOpen2">
                <div class="text_body_div">
                    <p class="text_body_p">
                        Docker is a commonplace development tool, vital for making containerized
                         apps for easy implementation and development. This app is deployed in a
                          Docker shell on an AWS Ubuntu server, connecting to containerized Mongo 
                          and MySQL databases. As far as a good teacher goes, you can’t go wrong with
                           Docker’s <a class="linkA"
                        href="https://docs.docker.com/get-started/"
                        target="_blank" alt="Docker Get Started">Get Started</a> page.
                         Don’t forget to set up an account on <a class="linkA"
                        href="https://hub.docker.com/"
                        target="_blank" alt="Docker Hub">Docker Hub</a>
                            to share future projects!
                    </p>
                </div>
                <div class="text_body_div">
                    <p class="text_body_p">
                        For this specific project, I needed to tweak my Docker setup
                         just a smidge. For starters, Ubuntu will have a <a class="linkA"
                        href="https://www.digitalocean.com/community/tutorials/how-to-install-and-use-docker-on-ubuntu-18-04"
                        target="_blank" alt="Docker Ubuntu">unique structure</a>
                          for Docker you may want to take a look at. Depending on who is 
                          collaborating with you, it couldn’t hurt to <a class="linkA"
                        href="https://www.digitalocean.com/community/questions/how-to-fix-docker-got-permission-denied-while-trying-to-connect-to-the-docker-daemon-socket"
                        target="_blank" alt="Docker User Setup">set up a separate User
                           account</a> as well. If you’d like to just use the root account, make sure 
                           to supersede any command with ‘sudo’ beforehand, as well as <a class="linkA"
                        href="https://docs.docker.com/engine/reference/commandline/login/"
                        target="_blank" alt="Docker Login">login to
                            your account</a> beforehand. Finally, this project required a lot of
                             debugging to determine just where my files were getting moved.
                              If you’re new to Docker, take a look at how to <a class="linkA"
                        href="https://www.baeldung.com/ops/docker-container-filesystem"
                        target="_blank" alt="Explore Container files">explore a docker container
                         filesystem</a>
                               to see just what these containers look like while operating! 
                               (Note, I’m utilizing Alpine in my Dockerfile for this project; 
                               your commands might need to look something like this when exploring 
                               the filesystem: 
                               <b class="bold_code">docker exec -it CONTAINER_HASH /bin/sh.</b>
                    </p>
                </div>
            </div>
        </div>
        {{/* CRON JOBS */}}
        <div class="documentation_section_div">
            <div class="header_opening_div">
                <h2 class="header_opening_h2" id="hedOpen3" onclick="documentDivDisplay(3)">
                    Cronjobs
                </h2>
            </div>
            <div class="body_opening_div" id="bodOpen3">
                <div class="text_body_div">
                    <p class="text_body_p">
                        To illustrate a ‘live data’ database, I’ve been inserting values
                         into my Mongo and SQL tables with a separate app that runs off
                          a Cron-Job. It runs daily on Tuesday evenings. You can check 
                          out the project <a class="linkA"
                        href="https://github.com/AmericanWonton/superDBAutomation"
                        target="_blank" alt="Automation Project">here</a>.
                    </p>
                </div>
                <div class="text_body_div">
                    <p class="text_body_p">
                        On my windows machine, I’d typically like scheduling this on
                         Task Scheduler. Fear not, <a class="linkA"
                        href="https://www.youtube.com/watch?v=QZJ1drMQz1A&t=101s"
                        target="_blank" alt="Cron Job Examples">Linux Cron Jobs</a>
                         aren’t too difficult
                          to comprehend! I’ve taken a copy of what I run on this server
                           as an example:
                    </p>
                </div>
                <div class="pic_body_div">
                    <img class="pic_body_img" src="static/images/png/Cron-JobExample.PNG" alt="Cronjob">
                </div>
            </div>
        </div>
        {{/* SQL AND NO-SQL Databases */}}
        <div class="documentation_section_div">
            <div class="header_opening_div">
                <h2 class="header_opening_h2" id="hedOpen4" onclick="documentDivDisplay(4)">
                    SQL and No-SQL
                </h2>
            </div>
            <div class="body_opening_div" id="bodOpen4">
                <div class="text_body_div">
                    <p class="text_body_p">
                        I’ve utilized both MySQL and Mongo Atlas to store data for this web app.
                         Just a note, it would be better to stick with ONE,
                         (both for performance AND headache’s sake), but I wanted to document
                          and try out both in Golang! Check out <a class="linkA"
                        href="https://www.udemy.com/course/go-programming-language/"
                        target="_blank" alt="Todd Golang">Todd McLeod’s Udemy
                           Course</a> for Golang WebDev to learn how to set them up.
                    </p>
                </div>
                <div class="text_body_div">
                    <p class="text_body_p">
                        As far as implementation in Golang is concerned,
                         you might want to check out <a class="linkA"
                        href="https://github.com/AmericanWonton/superUltimateDBWebApp"
                        target="_blank" alt="Super DB Link">this project link.</a>
                          It’s been difficult getting the EXACT CRUD operations
                           I needed but I’ve fine tuned them to be as efficient as possible.
                    </p>
                </div>
            </div>
        </div>
        {{/* EMAIL API */}}
        <div class="documentation_section_div">
            <div class="header_opening_div">
                <h2 class="header_opening_h2" id="hedOpen5" onclick="documentDivDisplay(5)">
                    Email API
                </h2>
            </div>
            <div class="body_opening_div" id="bodOpen5">
                <div class="text_body_div">
                    <p class="text_body_p">
                        I got sick of an older API I was using to send and receive emails.
                         I decided to setup a dummy gmail account implement Google’s email APIs
                          to send and receive emails. It takes some doing,(along with a Google Dev
                           account creation), but if interested,
                           <a class="linkA"
                        href="https://medium.com/wesionary-team/sending-emails-with-go-golang-using-smtp-gmail-and-oauth2-185ee12ab306"
                        target="_blank" alt="Google Email API">here is a good article on implementing
                            it for your usage.</a>
                    </p>
                </div>
            </div>
        </div>
        {{/* USER API */}}
        <div class="documentation_section_div">
            <div class="header_opening_div">
                <h2 class="header_opening_h2" id="hedOpen8" onclick="documentDivDisplay(8)">
                    User API
                </h2>
            </div>
            <div class="body_opening_div" id="bodOpen8">
                <div class="text_body_div">
                    <p class="text_body_p">
                       I’ve got my foot in the water for some DevOps research.
                        For Cloud Technologies, it involves a lot of APIS and 
                        refactoring JSON to fit certain data structures. There’s
                         nothing TOO complex about a food database, so I’ve decided 
                         to make one simple API example for this project. Given a User’s
                          ‘UserID’ in JSON format, this ‘userInfoAPI’ will return a User
                           after doing a MongoDB search. Feel free to give it a try! 
                    </p>
                </div>
                <div class="text_body_div">
                    <p class="text_body_p">
                       Send the following post request to http://superultimatedbwebapp.com/userInfoAPI:
                    </p>
                    <p class="text_body_p">
                       {"UserID": YOUR_USERID_HERE} <---------
                    </p>
                </div>
            </div>
        </div>
        {{/* AMAZON FILE STORAGE AND HOSTING */}}
        <div class="documentation_section_div">
            <div class="header_opening_div">
                <h2 class="header_opening_h2" id="hedOpen6" onclick="documentDivDisplay(6)">
                    Amazon File Storage and Hosting
                </h2>
            </div>
            <div class="body_opening_div" id="bodOpen6">
                <div class="text_body_div">
                    <p class="text_body_p">
                        This application is designed to be run on a Docker container,
                         hosted on an AWS Server. Should this server/application run into
                          any issues, it can be seamlessly placed on a copy of the same
                           server, through the magic of cloud computing! Routing Users
                            to your project is made even easier with <a class="linkA"
                        href="https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/routing-to-ec2-instance.html"
                        target="_blank" alt="Elastic AWS IPs">elastic IPs through
                             AWS.</a> Just buy a domain and hook it to your IP and you have
                              a set of scalable apps and servers ready to go. I’m already
                               impressed with the integration of Amazon’s Developer tools…so
                                much so, I’m getting my <a class="linkA"
                        href="https://aws.amazon.com/certification/"
                        target="_blank" alt="AWS Certification">AWS Certification</a> soon!
                    </p>
                </div>
                <div class="text_body_div">
                    <p class="text_body_p">
                        Speaking of tools, this app utilizes another section of AWS: S3 Cloud Storage.
                         Using <a class="linkA"
                        href="https://docs.aws.amazon.com/sdk-for-go/v2/api/service/s3/"
                        target="_blank" alt="Golang AWS">Golang’s AWS APIs,</a>  I can send, receive,
                         and store files for display
                          on my website with no cost to the application server. Just make sure you
                           don’t push any <a class="linkA"
                        href="https://docs.aws.amazon.com/powershell/latest/userguide/pstools-appendix-sign-up.html"
                        target="_blank" alt="Golang Certification">certification keys</a> to Git or anywhere else!
                    </p>
                </div>
                <div class="text_body_div">
                    <p class="text_body_p">
                        Check out my project for examples Amazon API storage such as
                         <a class="linkA"
                        href="https://stackoverflow.com/questions/54399421/how-to-download-from-aws-s3-using-golang"
                        target="_blank" alt="S3 File Download">downloading AWS S3 files,</a>
                         <a class="linkA"
                        href="https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/s3-example-basic-bucket-operations.html"
                        target="_blank" alt="Listing files in bucket">listing files in your S3 bucket,</a>
                          (as well as listing only <a class="linkA"
                        href="https://stackoverflow.com/questions/39637664/how-to-get-list-of-objects-from-sub-folder-of-amazon-s3-bucket-using-golang"
                        target="_blank" alt="Listing certain files">certain files in a directory</a>),
                           and storing files in your S3 bucket submitted from the User.
                            Small development notes: 1. In order to download bucket
                             files from different folder paths, you have to set the 
                             'disableRestProtocllorl URI Cleaning' value to true.
                              2. If you are using Docker with this API, you’ll need
                               to have the server running this application set to
                                ‘Accept ALL TCP Connections’. Might need to do the same for
                                the MySQL server as well.
                    </p>
                </div>
                <div class="pic_body_div">
                    <img class="pic_body_img" src="static/images/png/AWSBuckets.PNG" alt="AWSBuckets">
                    <img class="pic_body_img" src="static/images/png/AWSSecurityRules.PNG" alt="AWSSecurity">
                </div>
            </div>
        </div>
    </div>
{{end}}


{{define "signup"}}
    <div class="signup-ask-div">
        <h2 class="signup-ask-text" onclick="navigateHeader(6)">
            Sign Up!
        </h2>
    </div>
{{end}}
{{define "signup2"}}
    <div class="signup-ask-div">
        <h2 class="signup-ask-text">
            Sign Up!
        </h2>
        <p>Just a heads up, Users can get instant access to create and read data.</p>
        <br>
        <p>
            If you'd like an IT/Admin Role, fill out the form and provide your email. I'll 
            add your access as soon as I can ;) 
        </p>
        <br>
    </div>
{{end}}
{{define "signin"}}
    <div class="signin-ask-div">
        <h2 class="signin-ask-text" id="signin-ask-text">
            Sign-In!
        </h2>
    </div>
{{end}}
{{define "contact_section"}}
    <div class="contentDiv">
        <div class="informativeDiv">
            <p class="informativeP">
                Have a question for me? Want to know how I built some of this? Want some of this
                built for YOU? Reach out and let me know what's on your mind!
            </p>
        </div>
        <div class="meContactFormDiv">
            <div class="meContactForm">
                {{/* Name Field */}}
                <div class="fieldInformDiv">
                    <p class="fieldDescribeP">
                        Name:
                    </p>
                </div>
                <div class="fieldValueDiv">
                    <input type="text" class="inputreg" id="YourNameInput" name="YourNameInput" placeholder="Your Name">
                </div>
                {{/* Email */}}
                <div class="fieldInformDiv">
                    <p class="fieldDescribeP">
                        Email:
                    </p>
                </div>
                <div class="fieldValueDiv">
                    <input type="text" class="inputreg" id="YourEmailInput" name="YourEmailInput" placeholder="Your Email">
                </div>
                {{/* Message 2 Me */}}
                <div class="fieldInformDiv">
                    <p class="fieldDescribeP">
                        Message 2 Me:
                    </p>
                </div>
                <div class="fieldValueDiv">
                    <textarea  class="inputTextArea" id="YourMessageInput" name="YourMessageInput" placeholder="Got a question? Let me know!"></textarea>
                </div>
                {{/* Submit Button */}}
                <div class="fieldSubmitDiv">
                    <button class="submitB" id="submitB">Submit</button>
                </div>
                {{/* Informative Div */}}
                <div class="informResultDiv" id="informResultDiv">
                    <p class="informTxtP" id="informTxtP">

                    </p>
                </div>
            </div>
        </div>
    </div>
{{end}}

{{/* BEGINNING OF 'SIGN-UP' FORM DEFINITION */}}
{{define "signup-form"}}
    <div id="divform">
        <form id="signup-form"
        name="signup-form"
        action=""
        method="GET"
        onload="">
            <input type="text" id="username" name="username" placeholder="username" minlength=1 maxlength=20 required><br>
            <p id="form-input-info">Username taken or not entered!</p>
            <input type="password" id="password" name="password" placeholder="password" minlength=8 maxlength=20 required><br>
            <p id="form-input-info2">Password must be longer than 8 characters and contain 1 number, with no special characters</p>
            <input type="text" id="firstname" name="firstname" placeholder="first name" minlength=1 maxlength=20 required><br>
            <p id="form-input-info3">Please enter a first name</p>
            <input type="text" id="lastname" name="lastname" placeholder="last name" minlength=1 maxlength=20 required><br>
            <input type="text" id="email" name="email" placeholder="email" maxlength=50><br>
            <p id="form-input-info4">Please enter a first name</p>
            <label for="sr">Role</label>
            <select name="role" id="sr">
                <option value="user">user</option>
                <option value="admin">admin</option>
                <option value="IT">IT</option>
            </select>
            <input id="submit_button" name="submit_button" type="button" value="SUBMIT">
            <div id="informFormDiv" hidden>
                <p id="informFormP">

                </p>
            </div>
        </form>
    </div>
{{end}}
{{/* SIGN-UP FORM AJAX BEGINNING */}}
{{define "ajax-signup"}}
    {{/* On load, query available Usernames */}}
    <script>
        var theForm = document.querySelector('#signup-form');
        var userName = document.querySelector('#username');
        var password = document.querySelector('#password');
        var fName = document.querySelector('#firstname');
        var lName = document.querySelector('#lastname');
        var email = document.getElementById("email");
        var usernameErr = document.querySelector('#form-input-info');
        var passwordErr = document.querySelector('#form-input-info2');
        var fNameErr = document.querySelector('#form-input-info3');
        var lNameErr = document.querySelector('#form-input-info4');
        var role = document.getElementById("sr");
        // get the form elements defined in your form HTML above
        var form = document.getElementById("signup-form");
        var button = document.getElementById("submit_button");

        /* Query the database on page load */
        window.addEventListener('DOMContentLoaded', function(){
            //Hide all error messages, 
            usernameErr.textContent = "";
            passwordErr.textContent = "";
            fNameErr.textContent = "";
            lNameErr.textContent = "";
            //Loading Database Usernames
            console.log("Loading Database Usernames.");
            var xhr = new XMLHttpRequest();
            xhr.open('GET', '/loadUsernames', true);
            xhr.addEventListener('readystatechange', function(){
                if(xhr.readyState == XMLHttpRequest.DONE && xhr.status === 200) {
                    var item = xhr.responseText;
                    console.log(item);
                    if (item == 'true') {
                        console.log("We successfully loaded all the data");
                    } else {
                        console.log("Data was NOT successfully loaded.");
                    }
                }
            });
            xhr.send(userName.value);
        });

        /* Check the database for Username when the key is pressed! */
        username.addEventListener('input', function(){
            var xhr = new XMLHttpRequest();
            xhr.open('POST', '/checkUsername', true);
            xhr.addEventListener('readystatechange', function(){
                if(xhr.readyState === XMLHttpRequest.DONE && xhr.status === 200){
                    var item = xhr.responseText;
                    if (item == 'TooShort') {
                        usernameErr.textContent = 'Please enter a Username';
                        document.querySelector('#submit_button').disabled = true;
                    } else if (item == 'TooLong'){
                        usernameErr.textContent = 'Username must be under 20 characters';
                        document.querySelector('#submit_button').disabled = true;
                    } else if (item == 'ContainsLanguage'){
                        usernameErr.textContent = 'Username is innapropriate';
                        document.querySelector('#submit_button').disabled = true;
                    } else if (item == 'true') {
                        usernameErr.textContent = 'Username taken - Try another name!';
                        document.querySelector('#submit_button').disabled = true;
                    } else {
                        usernameErr.textContent = '';
                        document.querySelector('#submit_button').disabled = false;
                    }
                }
            });
            xhr.send(userName.value);
        });

        /*Check to see if password is an appropriate length! */
        password.addEventListener('input', function(){
            passString = password.value;
            if (passString.length <= 0) {
                passwordErr.textContent = 'Please enter a password';
                document.querySelector('#submit_button').disabled = true;
            } else if (passString.length > 20){
                passwordErr.textContent = 'Password must be under 20 characters.';
                document.querySelector('#submit_button').disabled = true;
            } else {
                passwordErr.textContent = '';
                document.querySelector('#submit_button').disabled = false;
            }
        });

        /*Check to see if firstname is okay */
        fName.addEventListener('input', function(){
            fnameString = fName.value;
            if (fnameString.length <= 0) {
                fNameErr.textContent = 'Please enter a firstname!';
                document.querySelector('#submit_button').disabled = true;
            } else if (fnameString.length > 20){
                fNameErr.textContent = 'Firstname must be less than 20 characters.';
                document.querySelector('#submit_button').disabled = true;
            } else {
                fNameErr.textContent = '';
                document.querySelector('#submit_button').disabled = false;
            }
        });

        /*Check to see if lastname is okay */
        lName.addEventListener('input', function(){
            lnameString = lName.value;
            if (lnameString.length <= 0) {
                lNameErr.textContent = 'Please enter a lastname!';
                document.querySelector('#submit_button').disabled = true;
            } else if (lnameString > 20){
                lNameErr.textContent = 'Last name cannot be more than 20 characters.';
                document.querySelector('#submit_button').disabled = true;
            } else {
                lNameErr.textContent = '';
                document.querySelector('#submit_button').disabled = false;
            }
        });

        /* Send Email to User when fields are filled out */
        button.addEventListener("click", function(){
                var successMSG = {
                    Message: "",
                    SuccessNum: 3
                };
                var newUser = {
                    UserName: "",
                    Password: "", //This was formally a []byte but we are changing our code to fit the database better
                    First:    "",
                    Last:     "",
                    Role:     "",
                    UserID:   0
                };
                newUser.UserName = userName.value;
                newUser.Password = password.value;
                newUser.First = fName.value;
                newUser.Last = lName.value;
                newUser.Role = role.value;
                var userData = {
                    TheUser: newUser,
                    Email: email.value
                };
                console.log("DEBUG: About to evaluate which role to send email to");
                var jsonString = JSON.stringify(userData);
                if (role.value == "user"){
                    //Create User
                    var xhr = new XMLHttpRequest();
                    xhr.open('POST', '/signUpUserUpdated', true);
                    xhr.setRequestHeader("Content-Type", "application/json");
                    xhr.addEventListener('readystatechange', function(){
                        if(xhr.readyState === XMLHttpRequest.DONE && xhr.status === 200){
                            var item = xhr.responseText;
                            var successMSG = JSON.parse(item);
                            if (successMSG.SuccessNum == 0){
                                var redirectStr = successMSG.RedirectURL
                                console.log("DEBUG: Successful User submission, going to main page.");
                                location.reload();
                            } else {
                                console.log("DEBUG: Unsuccessful User submission: " + successMSG.Message);
                                document.getElementById("informFormP").innerHTML = successMSG.Message;
                                document.getElementById("informFormDiv").style.display = "block";
                            }
                        }
                    });
                    xhr.send(jsonString);
                } else if (role.value == "admin") {
                    alert("Standby future admin, we will be approving your login shortly!" +
                    "\n" + "If you want to partially mess around with data, consider signing up as IT!\n" +
                    "Please email jbkeller@gmail.com if you have any questions.");
                } else if (role.value == "IT") {
                    //Create User
                    var xhr = new XMLHttpRequest();
                    xhr.open('POST', '/signUpUserUpdated', true);
                    xhr.setRequestHeader("Content-Type", "application/json");
                    xhr.addEventListener('readystatechange', function(){
                        if(xhr.readyState === XMLHttpRequest.DONE && xhr.status === 200){
                            var item = xhr.responseText;
                            var successMSG = JSON.parse(item);
                            if (successMSG.SuccessNum == 0){
                                var redirectStr = successMSG.RedirectURL
                                console.log("DEBUG: Successful IT submission, going to main page.")
                                location.reload();
                            } else {
                                console.log("DEBUG: Unsuccessful IT submission: " + successMSG.Message);
                                document.getElementById("informFormP").innerHTML = successMSG.Message;
                                document.getElementById("informFormDiv").style.display = "block";
                            }
                        }
                    });
                    xhr.send(jsonString);
                } else {
                    alert("Whoops, got the wrong value for our role part of the form.");
                }
        
        });
    </script>
{{end}}
{{/* SIGN-UP FORM AJAX ENDING */}}
{{/* ENDING OF 'SIGN-UP' FORM DEFINITION */}}
{{/* BEGINNING OF 'SIGN-IN' FORM DEFINITION */}}
{{define "sign-in-form"}}
    <div id="divform" class="divform">
        <form id="sign-in-form"
        method="POST">
            <div class="signInAlignmentDiv">
                {{/* USERNAME */}}
                <div class="labelDiv">
                    <p class="labelPText">
                        USERNAME:
                    </p>
                </div>
                <div class="inputDiv">
                    <input type="text" name="username" placeholder="username" id="inputTextMobileUN" required/>
                    <p class="form-field-err" id="username-err"></p>
                </div>
                {{/* PASSWORD */}}
                <div class="labelDiv">
                    <p class="labelPText">
                        PASSWORD:
                    </p>
                </div>
                <div class="inputDiv">
                    <input type="password" name="password" placeholder="password" id="inputTextMobilePW" required/>
                    <p class="form-field-err" id="password-err"></p>
                </div>
                {{/* SUBMIT BUTTON */}}
                <div class="fieldSection">
                    <button id="my-form-button">Submit</button>
                </div>
            </div>
        </form>
    </div>
{{end}}
{{/* ENDING OF THE 'SIGN-IN' FORM DEFINITION */}}
{{/* BEGINNING OF USER ACTION PAGE */}}
{{define "user-action"}}
    {{/* Divs for javascript refference*/}}
    <div class="actionDiv">
        <img src="static/images/jpg/hide-pain-harold.jpg"  class="actionimg" alt="harold">
        
        <br><br>
        <p class="actionInstructionText">Okay User, what data would you like to read/make?</p>
        <br> 
        {{/* See food section...maybe update it too */}}
        <div id="foodSeeSectionDiv">
            <button id="actionInstructionButton">
                SEE MY FOOD
            </button>
            <button id="actionInstructionButton2">
                Hide food
            </button>
            <div id="foodSeer">
                <div id="foodUpdater">
                    <form id="update-picture-form" name="update-picture-form"
                    enctype="multipart/form-data" method="POST" action="/mainPage" onload="">
                        <div class="formitems">
                            <select name="foodChoice" id="foodChoice">
                                <option value="hotdog">hotdog</option>
                                <option value="hamburger">hamburger</option>
                            </select>
                            <input type="number" id="foodID" name="foodID" placeholder="foodID Number" minlength=1 maxlength=20>
                            <input type="text" id="foodType" name="foodType" placeholder="foodType" minlength=1 maxlength=48>
                            <input type="text" id="condimentType" name="condimentType" placeholder="condiments" minlength=1 maxlength=48>
                            <input type="number" id="calories" name="calories" placeholder="calories" minlength=1 maxlength=8>
                            <input type="text" id="foodName" name="foodName" placeholder="foodName" minlength=1 maxlength=48>
                            <div id="photo_updater">
                                <p>Update Photo:</p>
                                <input id="photo-update-input" type="file" accept=".png,.jpg" name="newFile">
                                <input id="hiddenFoodID" type="hidden" name="hiddenFoodID">
                                <input id="hiddenUserID" type="hidden" name="hiddenUserID">
                                <input id="hiddenCurrentSRC" type="hidden" name="hiddenCurrentSRC">
                                <input id="hiddenPhotoID" type="hidden" name="hiddenPhotoID">
                                <input id="hiddenFoodType" type="hidden" name="hiddenFoodType">
                            <div>
                        </div>
                        <input type="hidden" id="hiddenFoodAction" name="hiddenFoodAction" value="food_update">
                        <input type="hidden" id="hiddenHasPhoto" name="hiddenHasPhoto">
                    </form>
                    
                    <button id="food_UpdateBtn">
                        Update Food
                    </button>
                    <button id="food_deleteBtn">
                        Delete food
                    </button>
                </div>
                <div id="hamSeer">

                </div>
                <div id="hdogSeer">

                </div>
            </div>
        </div>
        {{/* Make food section */}}
        <div id="foodMakeSectionDiv">
            <p class="actionInstructionText">MAKE FOOD</p>
            <br>
            <button id="actionChoice" onclick="revealFoodForm(0)">
                MAKE HOTDOG
            </button>
            <br>
            <button id="actionChoice" onclick="revealFoodForm(1)">
                MAKE HAMBURGER
            </button>
            <div id="foodFormDiv">
                
            </div>
            <br>
        </div>
    </div>
    {{/* Javascript event Buttons */}}
    <script type="text/javascript">
        //On clicked, get all data food data for this User
        var seeFoodButton = document.getElementById("actionInstructionButton");
        var hideFoodButton = document.getElementById("actionInstructionButton2");
        var foodSeerDiv = document.getElementById("foodSeer");
        var foodUpdater = document.getElementById("foodUpdater");
        var hdogSeerDiv = document.getElementById("hdogSeer");
        var hamSeerDiv = document.getElementById("hamSeer");
        var foodUpdateBtn = document.getElementById("food_UpdateBtn");
        var foodDeleteBtn = document.getElementById("food_deleteBtn");


        //When clicked, see all food options
        seeFoodButton.addEventListener("click", function(){
            toSend.UserID = userID;
            var jsonString = JSON.stringify(toSend);

            var xhr = new XMLHttpRequest();
            xhr.open('POST', '/getAllFoodMongo', true);
            xhr.setRequestHeader("Content-Type", "application/json");
            xhr.addEventListener('readystatechange', function(){
                if(xhr.readyState === XMLHttpRequest.DONE && xhr.status === 200){
                    var item = xhr.responseText;
                    var dataOBJ = JSON.parse(item);
                    if (dataOBJ.SuccessMessage == "Success") {
                        //Clear all arrays, just in case
                        hotdogIDArray = []; //Declare Array for id reference use
                        hamburgerIDArray = []; //Declare Array for id reference use
                        hotdogsArray = []; //All the hot dog object arrays
                        hamburgArray = []; //All the hamburger object arrays
                        hotdogPicArray = []; //All the hotdogpic arrays
                        hamburgPicArray = []; //All the hamburger pic arrays
                        hDogSrc =[]; //All the hotdog src arrays
                        hamSrc = []; // All the hamburger src arrays
                        hamSeerDiv.innerHTML = ""; //Clear hamseer div
                        hdogSeer.innerHTML = ""; //Clear hotdog div
                        var hotdogsGoodCount = true; //Used for not displaying hotdogs
                        var hamburgerGoodCount = true; //Used for displaying hotdogs
                        //Update Hotdog and Hamburger Arrays
                        //Update Hamburger Arrays
                        if (dataOBJ.HaveHamburgers == false){
                            console.log("DEBUG: We have no burgers to deliver");
                            hamburgerGoodCount = false;
                        } else {
                            for (var x = 0; x < dataOBJ.TheHamburgers.length; x++) {
                                var condimentsString = ""; //Declare string to display Condiments
                                hamburgerChoice = hamburgerChoice + 1;
                                aHamburger.BurgerType = dataOBJ.TheHamburgers[x].BurgerType;
                                if (dataOBJ.TheHamburgers[x].Condiments.length == 0){
                                    console.log("DEBUG: This Hamburger has no condiments.");
                                    condimentsString = "No condiments";
                                } else {
                                    for (var i = 0; i < dataOBJ.TheHamburgers[x].Condiments.length; i++){
                                        condimentsString = condimentsString + dataOBJ.TheHamburgers[x].Condiments[i] + " ";
                                    }
                                    aHamburger.Condiments = condimentsString;
                                }
                                aHamburger.Calories = dataOBJ.TheHamburgers[x].Calories;
                                aHamburger.Name = dataOBJ.TheHamburgers[x].Name;
                                aHamburger.FoodID = dataOBJ.TheHamburgers[x].FoodID;
                                aHamburger.UserID = dataOBJ.TheHamburgers[x].UserID;
                                aHamburger.PhotoID = dataOBJ.TheHamburgers[x].PhotoID;
                                aHamburger.PhotoSrc = dataOBJ.TheHamburgers[x].PhotoSrc;
                                console.log("Here is the src in this hamburger: " + dataOBJ.TheHamburgers[x].PhotoSrc); //DEBUG
                                aHamburger.DateCreated = dataOBJ.TheHamburgers[x].DateCreated;
                                aHamburger.DateUpdated = dataOBJ.TheHamburgers[x].DateUpdated;
                                hamburgArray.push(aHamburger); //Add the Hamburger to the Hamburger array
                            }
                        }
                        //Update Hotdog arrays
                        if (dataOBJ.HaveHotDogs == false){
                            console.log("DEBUG: NO HOT DOGS TO UPDATE");
                            hotdogsGoodCount = false;
                        } else {
                            for (var y = 0; y < dataOBJ.TheHotDogs.length; y++) {
                                var condimentsString = ""; //Declare string to display Condiments
                                hotDogChoice = hotDogChoice + 1;
                                aHotDog.HotDogType = dataOBJ.TheHotDogs[y].HotDogType;
                                if (dataOBJ.TheHotDogs[y].Condiments.length == 0){
                                    console.log("DEBUG: This hotdog has no condiments.");
                                    condimentsString = "No Condiments";
                                } else{
                                    for (var i = 0; i < dataOBJ.TheHotDogs[y].Condiments.length; i++){
                                        condimentsString = condimentsString + dataOBJ.TheHotDogs[y].Condiments[i] + " ";
                                    }
                                    aHotDog.Condiments = condimentsString;
                                }
                                aHotDog.Calories = dataOBJ.TheHotDogs[y].Calories;
                                aHotDog.Name = dataOBJ.TheHotDogs[y].Name;
                                aHotDog.FoodID = dataOBJ.TheHotDogs[y].FoodID;
                                aHotDog.UserID = dataOBJ.TheHotDogs[y].UserID;
                                aHotDog.PhotoID = dataOBJ.TheHotDogs[y].PhotoID;
                                aHotDog.PhotoSrc = dataOBJ.TheHotDogs[y].PhotoSrc;
                                aHotDog.DateCreated = dataOBJ.TheHotDogs[y].DateCreated;
                                aHotDog.DateUpdated = dataOBJ.TheHotDogs[y].DateUpdated;
                                hotdogsArray.push(aHotDog); //Add the hotdog to the hotdog array
                            }
                        }
                        
                        //Display all Hamburgers
                        if (hamburgerGoodCount == false){
                            console.log("We won't be displaying hamburgers.");
                        } else {
                            for (var y = 0; y < dataOBJ.TheHamburgers.length; y++) {
                                //Create container for Hamburger info
                                var udContainerDiv = document.createElement("div");
                                udContainerDiv.setAttribute("id", "udContainerDiv");

                                //Create ID info section
                                var udcFieldInfoTxtDiv = document.createElement("div");
                                udcFieldInfoTxtDiv.setAttribute("id", "udcFieldInfoTxtDiv");
                                var udcfText = document.createElement("p");
                                udcfText.setAttribute("id", "udcfText");
                                udcfText.innerHTML = "Food Order Hamburger";
                                udcFieldInfoTxtDiv.appendChild(udcfText); //Append text to Div
                                udContainerDiv.appendChild(udcFieldInfoTxtDiv); //Append infoDiv to container
                                var udcFieldInfoTxtDiv = document.createElement("div");
                                udcFieldInfoTxtDiv.setAttribute("id", "udcFieldInfoTxtDiv");
                                var udcfText = document.createElement("p");
                                udcfText.setAttribute("id", "udcfText");
                                udcfText.innerHTML = y;
                                udcFieldInfoTxtDiv.appendChild(udcfText); //Append text to Div
                                udContainerDiv.appendChild(udcFieldInfoTxtDiv); //Append infoDiv to container

                                //Create Type info section
                                var udcFieldInfoTxtDiv = document.createElement("div");
                                udcFieldInfoTxtDiv.setAttribute("id", "udcFieldInfoTxtDiv");
                                var udcfText = document.createElement("p");
                                udcfText.setAttribute("id", "udcfText");
                                udcfText.innerHTML = "Hamburger Type";
                                udcFieldInfoTxtDiv.appendChild(udcfText); //Append text to Div
                                udContainerDiv.appendChild(udcFieldInfoTxtDiv); //Append infoDiv to container
                                var udcFieldInfoTxtDiv = document.createElement("div");
                                udcFieldInfoTxtDiv.setAttribute("id", "udcFieldInfoTxtDiv");
                                var udcfText = document.createElement("p");
                                udcfText.setAttribute("id", "udcfText");
                                udcfText.innerHTML = dataOBJ.TheHamburgers[y].BurgerType;
                                udcFieldInfoTxtDiv.appendChild(udcfText); //Append text to Div
                                udContainerDiv.appendChild(udcFieldInfoTxtDiv); //Append infoDiv to container

                                //Create Condiment info section
                                var condimentsString = ""; //Declare string to display Condiments
                                var udcFieldInfoTxtDiv = document.createElement("div");
                                udcFieldInfoTxtDiv.setAttribute("id", "udcFieldInfoTxtDiv");
                                var udcfText = document.createElement("p");
                                udcfText.setAttribute("id", "udcfText");
                                udcfText.innerHTML = "Condiment";
                                udcFieldInfoTxtDiv.appendChild(udcfText); //Append text to Div
                                udContainerDiv.appendChild(udcFieldInfoTxtDiv); //Append infoDiv to container
                                var udcFieldInfoTxtDiv = document.createElement("div");
                                udcFieldInfoTxtDiv.setAttribute("id", "udcFieldInfoTxtDiv");
                                var udcfText = document.createElement("p");
                                udcfText.setAttribute("id", "udcfText");
                                if (dataOBJ.TheHamburgers[y].Condiments.length == 0){
                                    console.log("DEBUG: This Hamburger has no condiments.");
                                    condimentsString = "No condiments";
                                    udcfText.innerHTML = condimentsString
                                } else {
                                    for (var i = 0; i < dataOBJ.TheHamburgers[y].Condiments.length; i++){
                                        condimentsString = condimentsString + dataOBJ.TheHamburgers[y].Condiments[i] + " ";
                                    }
                                    udcfText.innerHTML = condimentsString
                                }
                                udcFieldInfoTxtDiv.appendChild(udcfText); //Append text to Div
                                udContainerDiv.appendChild(udcFieldInfoTxtDiv); //Append infoDiv to container

                                //Create Calories info section
                                var udcFieldInfoTxtDiv = document.createElement("div");
                                udcFieldInfoTxtDiv.setAttribute("id", "udcFieldInfoTxtDiv");
                                var udcfText = document.createElement("p");
                                udcfText.setAttribute("id", "udcfText");
                                udcfText.innerHTML = "Calories";
                                udcFieldInfoTxtDiv.appendChild(udcfText); //Append text to Div
                                udContainerDiv.appendChild(udcFieldInfoTxtDiv); //Append infoDiv to container
                                var udcFieldInfoTxtDiv = document.createElement("div");
                                udcFieldInfoTxtDiv.setAttribute("id", "udcFieldInfoTxtDiv");
                                var udcfText = document.createElement("p");
                                udcfText.setAttribute("id", "udcfText");
                                udcfText.innerHTML = dataOBJ.TheHamburgers[y].Calories;
                                udcFieldInfoTxtDiv.appendChild(udcfText); //Append text to Div
                                udContainerDiv.appendChild(udcFieldInfoTxtDiv); //Append infoDiv to container

                                //Create Name info section
                                var udcFieldInfoTxtDiv = document.createElement("div");
                                udcFieldInfoTxtDiv.setAttribute("id", "udcFieldInfoTxtDiv");
                                var udcfText = document.createElement("p");
                                udcfText.setAttribute("id", "udcfText");
                                udcfText.innerHTML = "Name";
                                udcFieldInfoTxtDiv.appendChild(udcfText); //Append text to Div
                                udContainerDiv.appendChild(udcFieldInfoTxtDiv); //Append infoDiv to container
                                var udcFieldInfoTxtDiv = document.createElement("div");
                                udcFieldInfoTxtDiv.setAttribute("id", "udcFieldInfoTxtDiv");
                                var udcfText = document.createElement("p");
                                udcfText.setAttribute("id", "udcfText");
                                udcfText.innerHTML = dataOBJ.TheHamburgers[y].Name;
                                udcFieldInfoTxtDiv.appendChild(udcfText); //Append text to Div
                                udContainerDiv.appendChild(udcFieldInfoTxtDiv); //Append infoDiv to container

                                //Create FoodID Info Section
                                var udcFieldInfoTxtDiv = document.createElement("div");
                                udcFieldInfoTxtDiv.setAttribute("id", "udcFieldInfoTxtDiv");
                                var udcfText = document.createElement("p");
                                udcfText.setAttribute("id", "udcfText");
                                udcfText.innerHTML = "FoodID";
                                udcFieldInfoTxtDiv.appendChild(udcfText); //Append text to Div
                                udContainerDiv.appendChild(udcFieldInfoTxtDiv); //Append infoDiv to container
                                var udcFieldInfoTxtDiv = document.createElement("div");
                                udcFieldInfoTxtDiv.setAttribute("id", "udcFieldInfoTxtDiv");
                                var udcfText = document.createElement("p");
                                udcfText.setAttribute("id", "udcfText");
                                udcfText.innerHTML = dataOBJ.TheHamburgers[y].FoodID;
                                udcFieldInfoTxtDiv.appendChild(udcfText); //Append text to Div
                                udContainerDiv.appendChild(udcFieldInfoTxtDiv); //Append infoDiv to container

                                //Create Photo Section
                                var udcFieldInfoTxtDiv = document.createElement("div");
                                udcFieldInfoTxtDiv.setAttribute("id", "udcFieldInfoTxtDiv");
                                var udcfText = document.createElement("p");
                                udcfText.setAttribute("id", "udcfText");
                                udcfText.innerHTML = "Hamburger Photo";
                                udcFieldInfoTxtDiv.appendChild(udcfText); //Append text to Div
                                udContainerDiv.appendChild(udcFieldInfoTxtDiv); //Append infoDiv to container
                                var udcFieldInfoTxtDiv = document.createElement("div");
                                udcFieldInfoTxtDiv.setAttribute("id", "udcFieldInfoTxtDiv");
                                var udfcPic = document.createElement("img");
                                udfcPic.setAttribute("id", "udfcFeildInfoPic");
                                var photoThere = srcChecker(dataOBJ.TheHamburgers[y], aHotDog, 0); //Check to see if photo exists
                                if (photoThere == true){
                                    console.log("We found the source: " + dataOBJ.TheHamburgers[y].PhotoSrc); //DEBUG
                                    udfcPic.src = String(dataOBJ.TheHamburgers[y].PhotoSrc);
                                    udfcPic.setAttribute("alt", "Food Pic: " + dataOBJ.TheHamburgers[y].PhotoSrc);
                                } else {
                                    console.log("Source not found: " + dataOBJ.TheHamburgers[y].PhotoSrc);
                                    udfcPic.setAttribute("src", "static/images/png/Photo-Unavailable.png");
                                    udfcPic.setAttribute("alt", "Food Pic Not Found.");
                                }
                                udcFieldInfoTxtDiv.appendChild(udfcPic); //Append text to Div
                                udContainerDiv.appendChild(udcFieldInfoTxtDiv); //Append infoDiv to container

                                //Create DateCreated Info Section
                                var udcFieldInfoTxtDiv = document.createElement("div");
                                udcFieldInfoTxtDiv.setAttribute("id", "udcFieldInfoTxtDiv");
                                var udcfText = document.createElement("p");
                                udcfText.setAttribute("id", "udcfText");
                                udcfText.innerHTML = "DateCreated";
                                udcFieldInfoTxtDiv.appendChild(udcfText); //Append text to Div
                                udContainerDiv.appendChild(udcFieldInfoTxtDiv); //Append infoDiv to container
                                var udcFieldInfoTxtDiv = document.createElement("div");
                                udcFieldInfoTxtDiv.setAttribute("id", "udcFieldInfoTxtDiv");
                                var udcfText = document.createElement("p");
                                udcfText.setAttribute("id", "udcfText");
                                udcfText.innerHTML = dataOBJ.TheHamburgers[y].DateCreated;
                                udcFieldInfoTxtDiv.appendChild(udcfText); //Append text to Div
                                udContainerDiv.appendChild(udcFieldInfoTxtDiv); //Append infoDiv to container

                                //Create DateUpdated Info Section
                                var udcFieldInfoTxtDiv = document.createElement("div");
                                udcFieldInfoTxtDiv.setAttribute("id", "udcFieldInfoTxtDiv");
                                var udcfText = document.createElement("p");
                                udcfText.setAttribute("id", "udcfText");
                                udcfText.innerHTML = "DateUpdated";
                                udcFieldInfoTxtDiv.appendChild(udcfText); //Append text to Div
                                udContainerDiv.appendChild(udcFieldInfoTxtDiv); //Append infoDiv to container
                                var udcFieldInfoTxtDiv = document.createElement("div");
                                udcFieldInfoTxtDiv.setAttribute("id", "udcFieldInfoTxtDiv");
                                var udcfText = document.createElement("p");
                                udcfText.setAttribute("id", "udcfText");
                                udcfText.innerHTML = dataOBJ.TheHamburgers[y].DateUpdated;
                                udcFieldInfoTxtDiv.appendChild(udcfText); //Append text to Div
                                udContainerDiv.appendChild(udcFieldInfoTxtDiv); //Append infoDiv to container
                                 
                                //All the divs fields for the container are added. Add this to the hamseer!
                                hamSeerDiv.appendChild(udContainerDiv);
                            }
                            hamSeerDiv.style.display = "block"; //Display the formatted Hamburger Divs
                        }
                        
                        //Display all HotDogs
                        if (hotdogsGoodCount == false){
                            console.log("We won't be displaying hot dogs.");
                        } else {
                            for (var i = 0; i < dataOBJ.TheHotDogs.length; i++) {
                                //Create container for hotdog info
                                var udContainerDiv = document.createElement("div");
                                udContainerDiv.setAttribute("id", "udContainerDiv");

                                //Create ID info section
                                var udcFieldInfoTxtDiv = document.createElement("div");
                                udcFieldInfoTxtDiv.setAttribute("id", "udcFieldInfoTxtDiv");
                                var udcfText = document.createElement("p");
                                udcfText.setAttribute("id", "udcfText");
                                udcfText.innerHTML = "Food Order Hotdog";
                                udcFieldInfoTxtDiv.appendChild(udcfText); //Append text to Div
                                udContainerDiv.appendChild(udcFieldInfoTxtDiv); //Append infoDiv to container
                                var udcFieldInfoTxtDiv = document.createElement("div");
                                udcFieldInfoTxtDiv.setAttribute("id", "udcFieldInfoTxtDiv");
                                var udcfText = document.createElement("p");
                                udcfText.setAttribute("id", "udcfText");
                                udcfText.innerHTML = i;
                                udcFieldInfoTxtDiv.appendChild(udcfText); //Append text to Div
                                udContainerDiv.appendChild(udcFieldInfoTxtDiv); //Append infoDiv to container

                                //Create Type info section
                                var udcFieldInfoTxtDiv = document.createElement("div");
                                udcFieldInfoTxtDiv.setAttribute("id", "udcFieldInfoTxtDiv");
                                var udcfText = document.createElement("p");
                                udcfText.setAttribute("id", "udcfText");
                                udcfText.innerHTML = "Hotdog Type";
                                udcFieldInfoTxtDiv.appendChild(udcfText); //Append text to Div
                                udContainerDiv.appendChild(udcFieldInfoTxtDiv); //Append infoDiv to container
                                var udcFieldInfoTxtDiv = document.createElement("div");
                                udcFieldInfoTxtDiv.setAttribute("id", "udcFieldInfoTxtDiv");
                                var udcfText = document.createElement("p");
                                udcfText.setAttribute("id", "udcfText");
                                udcfText.innerHTML = dataOBJ.TheHotDogs[i].HotDogType;
                                udcFieldInfoTxtDiv.appendChild(udcfText); //Append text to Div
                                udContainerDiv.appendChild(udcFieldInfoTxtDiv); //Append infoDiv to container

                                //Create Condiment info section
                                var condimentsString = ""; //Declare string to display Condiments
                                var udcFieldInfoTxtDiv = document.createElement("div");
                                udcFieldInfoTxtDiv.setAttribute("id", "udcFieldInfoTxtDiv");
                                var udcfText = document.createElement("p");
                                udcfText.setAttribute("id", "udcfText");
                                udcfText.innerHTML = "Condiment";
                                udcFieldInfoTxtDiv.appendChild(udcfText); //Append text to Div
                                udContainerDiv.appendChild(udcFieldInfoTxtDiv); //Append infoDiv to container
                                var udcFieldInfoTxtDiv = document.createElement("div");
                                udcFieldInfoTxtDiv.setAttribute("id", "udcFieldInfoTxtDiv");
                                var udcfText = document.createElement("p");
                                udcfText.setAttribute("id", "udcfText");
                                if (dataOBJ.TheHotDogs[i].Condiments.length == 0){
                                    console.log("DEBUG: This Hamburger has no condiments.");
                                    condimentsString = "No condiments";
                                    udcfText.innerHTML = condimentsString
                                } else {
                                    for (var n = 0; n < dataOBJ.TheHotDogs[i].Condiments.length; n++){
                                        condimentsString = condimentsString + dataOBJ.TheHotDogs[i].Condiments[n] + " ";
                                    }
                                    udcfText.innerHTML = condimentsString
                                }
                                udcFieldInfoTxtDiv.appendChild(udcfText); //Append text to Div
                                udContainerDiv.appendChild(udcFieldInfoTxtDiv); //Append infoDiv to container

                                //Create Calories info section
                                var udcFieldInfoTxtDiv = document.createElement("div");
                                udcFieldInfoTxtDiv.setAttribute("id", "udcFieldInfoTxtDiv");
                                var udcfText = document.createElement("p");
                                udcfText.setAttribute("id", "udcfText");
                                udcfText.innerHTML = "Calories";
                                udcFieldInfoTxtDiv.appendChild(udcfText); //Append text to Div
                                udContainerDiv.appendChild(udcFieldInfoTxtDiv); //Append infoDiv to container
                                var udcFieldInfoTxtDiv = document.createElement("div");
                                udcFieldInfoTxtDiv.setAttribute("id", "udcFieldInfoTxtDiv");
                                var udcfText = document.createElement("p");
                                udcfText.setAttribute("id", "udcfText");
                                udcfText.innerHTML = dataOBJ.TheHotDogs[i].Calories;
                                udcFieldInfoTxtDiv.appendChild(udcfText); //Append text to Div
                                udContainerDiv.appendChild(udcFieldInfoTxtDiv); //Append infoDiv to container

                                //Create Name info section
                                var udcFieldInfoTxtDiv = document.createElement("div");
                                udcFieldInfoTxtDiv.setAttribute("id", "udcFieldInfoTxtDiv");
                                var udcfText = document.createElement("p");
                                udcfText.setAttribute("id", "udcfText");
                                udcfText.innerHTML = "Name";
                                udcFieldInfoTxtDiv.appendChild(udcfText); //Append text to Div
                                udContainerDiv.appendChild(udcFieldInfoTxtDiv); //Append infoDiv to container
                                var udcFieldInfoTxtDiv = document.createElement("div");
                                udcFieldInfoTxtDiv.setAttribute("id", "udcFieldInfoTxtDiv");
                                var udcfText = document.createElement("p");
                                udcfText.setAttribute("id", "udcfText");
                                udcfText.innerHTML = dataOBJ.TheHotDogs[i].Name;
                                udcFieldInfoTxtDiv.appendChild(udcfText); //Append text to Div
                                udContainerDiv.appendChild(udcFieldInfoTxtDiv); //Append infoDiv to container

                                //Create FoodID section
                                var udcFieldInfoTxtDiv = document.createElement("div");
                                udcFieldInfoTxtDiv.setAttribute("id", "udcFieldInfoTxtDiv");
                                var udcfText = document.createElement("p");
                                udcfText.setAttribute("id", "udcfText");
                                udcfText.innerHTML = "FoodID";
                                udcFieldInfoTxtDiv.appendChild(udcfText); //Append text to Div
                                udContainerDiv.appendChild(udcFieldInfoTxtDiv); //Append infoDiv to container
                                var udcFieldInfoTxtDiv = document.createElement("div");
                                udcFieldInfoTxtDiv.setAttribute("id", "udcFieldInfoTxtDiv");
                                var udcfText = document.createElement("p");
                                udcfText.setAttribute("id", "udcfText");
                                udcfText.innerHTML = dataOBJ.TheHotDogs[i].FoodID;
                                udcFieldInfoTxtDiv.appendChild(udcfText); //Append text to Div
                                udContainerDiv.appendChild(udcFieldInfoTxtDiv); //Append infoDiv to container

                                //Create Photo Section
                                var udcFieldInfoTxtDiv = document.createElement("div");
                                udcFieldInfoTxtDiv.setAttribute("id", "udcFieldInfoTxtDiv");
                                var udcfText = document.createElement("p");
                                udcfText.setAttribute("id", "udcfText");
                                udcfText.innerHTML = "Hamburger Photo";
                                udcFieldInfoTxtDiv.appendChild(udcfText); //Append text to Div
                                udContainerDiv.appendChild(udcFieldInfoTxtDiv); //Append infoDiv to container
                                var udcFieldInfoTxtDiv = document.createElement("div");
                                udcFieldInfoTxtDiv.setAttribute("id", "udcFieldInfoTxtDiv");
                                var udfcPic = document.createElement("img");
                                udfcPic.setAttribute("id", "udfcFeildInfoPic");
                                var photoThere = srcChecker(aHamburger, dataOBJ.TheHotDogs[i], 1); //Check to see if photo exists
                                if (photoThere == true){
                                    console.log("We found the source: " + dataOBJ.TheHotDogs[i].PhotoSrc); //DEBUG
                                    udfcPic.src = String(dataOBJ.TheHotDogs[i].PhotoSrc);
                                    udfcPic.setAttribute("alt", "Food Pic: " + dataOBJ.TheHotDogs[i].PhotoSrc);
                                } else {
                                    console.log("Source not found: " + dataOBJ.TheHotDogs[i].PhotoSrc);
                                    udfcPic.setAttribute("src", "static/images/png/Photo-Unavailable.png");
                                    udfcPic.setAttribute("alt", "Food Pic Not Found.");
                                }
                                udcFieldInfoTxtDiv.appendChild(udfcPic); //Append text to Div
                                udContainerDiv.appendChild(udcFieldInfoTxtDiv); //Append infoDiv to container

                                //Create DateCreated info section
                                var udcFieldInfoTxtDiv = document.createElement("div");
                                udcFieldInfoTxtDiv.setAttribute("id", "udcFieldInfoTxtDiv");
                                var udcfText = document.createElement("p");
                                udcfText.setAttribute("id", "udcfText");
                                udcfText.innerHTML = "DateCreated";
                                udcFieldInfoTxtDiv.appendChild(udcfText); //Append text to Div
                                udContainerDiv.appendChild(udcFieldInfoTxtDiv); //Append infoDiv to container
                                var udcFieldInfoTxtDiv = document.createElement("div");
                                udcFieldInfoTxtDiv.setAttribute("id", "udcFieldInfoTxtDiv");
                                var udcfText = document.createElement("p");
                                udcfText.setAttribute("id", "udcfText");
                                udcfText.innerHTML = dataOBJ.TheHotDogs[i].DateCreated;
                                udcFieldInfoTxtDiv.appendChild(udcfText); //Append text to Div
                                udContainerDiv.appendChild(udcFieldInfoTxtDiv); //Append infoDiv to container

                                //Create DateUpdated info section
                                var udcFieldInfoTxtDiv = document.createElement("div");
                                udcFieldInfoTxtDiv.setAttribute("id", "udcFieldInfoTxtDiv");
                                var udcfText = document.createElement("p");
                                udcfText.setAttribute("id", "udcfText");
                                udcfText.innerHTML = "DateUpdated";
                                udcFieldInfoTxtDiv.appendChild(udcfText); //Append text to Div
                                udContainerDiv.appendChild(udcFieldInfoTxtDiv); //Append infoDiv to container
                                var udcFieldInfoTxtDiv = document.createElement("div");
                                udcFieldInfoTxtDiv.setAttribute("id", "udcFieldInfoTxtDiv");
                                var udcfText = document.createElement("p");
                                udcfText.setAttribute("id", "udcfText");
                                udcfText.innerHTML = dataOBJ.TheHotDogs[i].DateUpdated;
                                udcFieldInfoTxtDiv.appendChild(udcfText); //Append text to Div
                                udContainerDiv.appendChild(udcFieldInfoTxtDiv); //Append infoDiv to container

                                //All the divs fields for the container are added. Add this to the hamseer!
                                hdogSeerDiv.appendChild(udContainerDiv);

                            }
                            hdogSeerDiv.style.display = "block"; //Display the formattted Hotdog divs
                        }
                        
                        foodUpdater.style.display = "block"; //Display the foodUpdater div

                    } else {
                        //No data retrieved
                        console.log("Either User has no data or no data could be retrieved.");
                        alert("Either User has no data or no data could be retrieved.");
                        //DEBUG: PRINT A MESSAGE TO USER HERE.
                    } 
                }
            });
            xhr.send(jsonString);
        });

        //Call the food deleter function to run a query and delete food,(if the selection is appropriate)
        foodDeleteBtn.addEventListener("click", function(){
            //Declare input variable names to work with
            var foodChoice = document.getElementById("foodChoice");
            var foodID = document.getElementById("foodID");
            

            //Assign fields to pass to food deleter
            if (foodChoice.value == "hotdog"){
                //See if the foodID field was assigned correctly
                if (Number(foodID.value) <= 0){
                    //bad selection
                    console.log("User inputted a wrong selection: " + foodID.value);
                    alert("Please enter a foodID listed below.");
                } else {    
                    //Good Selection
                    var foodNumber = Number(foodID.value);
                    foodDeleter(foodChoice.value, foodNumber, userID);
                }
            } else if (foodChoice.value == "hamburger"){
                //See if the foodID field was assigned correctly
                if (Number(foodID.value) <= 0){
                    //bad selection
                    console.log("User inputted a wrong selection: " + foodID.value);
                    alert("Please enter a foodID listed below.");
                } else {    
                    //Good Selection
                    var foodNumber = Number(foodID.value);
                    foodDeleter(foodChoice.value, foodNumber, userID);
                }
            } else {
                console.log("Error, User selected nothing in the foodchoice" +
                " field or wrong value got put in place.");
                alert("Please select hamburger or hotdog food to delete.");
                location.reload();
            }
        });
        //Update food upon the correct selection
        foodUpdateBtn.addEventListener("click", function(){
            //Declare input variable names to work with
            var hadPhoto = document.getElementById("hiddenHasPhoto"); //HiddenPhotoValue
            var foodIDNumber = document.getElementById("foodID"); //foodID Numb
            var photoInput = document.getElementById("photo-update-input"); //Photo Input
            var updatePicForm = document.getElementById("update-picture-form"); //The photo form
            /* CHECK TO SEE IF THERE'S A PHOTO SUBMITTED TO CHANGE */
            var photoSubmission = fileUploadCheck();
            if (photoSubmission == true){
                //Begin process of submitting submitted photo for an update
                hadPhoto.value = "has_photo";
            } else {
                hadPhoto.value = "no_photo"; //Change to no photo form type and remove photoinput before submission
                //updatePicForm.setAttribute("enctype", "application/x-www-form-urlencoded");
                photoInput.parentNode.removeChild(photoInput);
            }
            var theUserID = document.getElementById("hiddenUserID"); //Set the UserID
            theUserID.value = userID; // NEED TO DO THIS FOR THE USER
            var theUpdateForm = document.getElementById("update-picture-form"); //Update Form
            
            //Assign fields to pass to food changer
            if (foodChoice.value == "hotdog"){
                //See if the foodID field was assigned correctly
                if (Number(foodIDNumber.value) < 0){
                    //bad selection
                    alert("Please enter a foodID listed below.");
                    location.reload();
                } else {    
                    //Good Selection
                    theUpdateForm.submit();
                }
            } else if (foodChoice.value == "hamburger"){
                //See if the foodID field was assigned correctly
                if (Number(foodIDNumber.value) < 0){
                    //bad selection
                    alert("Please enter a foodID listed below.");
                    location.reload(true);
                } else {    
                    //Good Selection
                    theUpdateForm.submit();
                }
            } else {
                console.log("Error, User selected nothing in the foodchoice" +
                " field or wrong value got put in place.");
                alert("Please select hamburger or hotdog food to update.");
                location.reload(true);
            }
        });
        //Hide all foods
        hideFoodButton.addEventListener("click", function(){
            location.reload(true);
        });
    </script>
{{end}}
{{/* ENDING OF USER ACTION PAGE */}}
{{/* BEGINNING OF ADMIN ACTION PAGE */}}
{{define "admin-action"}}
    {{/* Divs for javascript refference*/}}
    <div class="actionDiv">
        <img src="static/images/jpg/IT-GUY.jpg"  class="actionimg" alt="IT Person">
        <img src="amazonimages/bunnytest.jpg" class="actionimg" alt="testbunny">
        <br><br>
        <p class="actionInstructionText">Okay IT person, what data would you like to read/make?</p>
        <br>
        {{/* See food section...maybe update it too */}}
        <div id="foodSeeSectionDiv">
            <button id="actionInstructionButton">
                SEE FOOD
            </button>
            <button id="actionInstructionButton2">
                HIDE FOOD
            </button>
            <input type="number" id="userID" name="userID" placeholder="userID" maxlength=8>
            <div id="foodSeer">
                <div id="foodUpdater">
                    <form id="update-picture-form" name="update-picture-form"
                    enctype="multipart/form-data" method="POST" action="/mainPage" onload="">
                        <div class="formitems">
                            <select name="foodChoice" id="foodChoice">
                                <option value="hotdog">hotdog</option>
                                <option value="hamburger">hamburger</option>
                            </select>
                            <input type="number" id="foodID" name="foodID" placeholder="foodID Number" minlength=1 maxlength=20>
                            <input type="number" id="theUserID" name="theUserID" placeholder="user ID" minlength=1 maxlength=20>
                            <input type="text" id="foodType" name="foodType" placeholder="foodType" minlength=1 maxlength=48>
                            <input type="text" id="condimentType" name="condimentType" placeholder="condiments" minlength=1 maxlength=48>
                            <input type="number" id="calories" name="calories" placeholder="calories" minlength=1 maxlength=8>
                            <input type="text" id="foodName" name="foodName" placeholder="foodName" minlength=1 maxlength=48>
                            <div id="photo_updater">
                                <p>Update Photo:</p>
                                <input id="photo-update-input" type="file" accept=".png,.jpg" name="newFile">
                                <input id="hiddenFoodID" type="hidden" name="hiddenFoodID">
                                <input id="hiddenUserID" type="hidden" name="hiddenUserID">
                                <input id="hiddenCurrentSRC" type="hidden" name="hiddenCurrentSRC">
                                <input id="hiddenPhotoID" type="hidden" name="hiddenPhotoID">
                                <input id="hiddenFoodType" type="hidden" name="hiddenFoodType">
                            <div>
                        </div>
                        <input type="hidden" id="hiddenFoodAction" name="hiddenFoodAction" value="food_update">
                        <input type="hidden" id="hiddenHasPhoto" name="hiddenHasPhoto">
                    </form>
                    
                    <button id="food_UpdateBtn">
                        Update Food
                    </button>
                    <button id="food_deleteBtn">
                        Delete food
                    </button>
                </div>
                <div id="hamSeer">

                </div>
                <div id="hdogSeer">

                </div>
            </div>
        </div>
        {{/* Make food section */}}
        <div id="foodMakeSectionDiv">
            <p class="actionInstructionText">MAKE FOOD</p>
            <br>
            <button id="actionChoice" onclick="revealFoodForm(2)">
                MAKE HOTDOG
            </button>
            <br>
            <button id="actionChoice" onclick="revealFoodForm(3)">
                MAKE HAMBURGER
            </button>
            <div id="foodFormDiv">
                
            </div>
            <br>
        </div>
        {{/* DEBUG posting section
            <div id="DEBUGpostDiv">
            <form id="DEBUGpostForm" enctype="multipart/form-data" method="POST" action="/mainPage">
                <input type="text" id="DEBUGfakeInput" name="DEBUGfakeInput">
                <input type="file" id="theTestFile" name="newFile">
                <input type="hidden" id="DEBUGHIDDIENINPUT" name="DEBUGHIDDIENINPUT" value="bigOof">
                <input type="hidden" id="hiddenFoodActiontest" name="hiddenFoodAction" value="test">
                <button id="theSubmitButton" name="theSubmitButton" onclick="testFormSubmit()">
                    Submit stuff!
                </button>
            </form>
        </div>
         */}}  
    </div>
    <script>
        //On clicked, get all data food data for this User
        var seeFoodButton = document.getElementById("actionInstructionButton");
        var hideFoodButton = document.getElementById("actionInstructionButton2");
        var userIDInput = document.getElementById("userID");
        var foodSeerDiv = document.getElementById("foodSeer");
        var foodUpdater = document.getElementById("foodUpdater");
        var hdogSeerDiv = document.getElementById("hdogSeer");
        var hamSeerDiv = document.getElementById("hamSeer");
        var foodUpdateBtn = document.getElementById("food_UpdateBtn");
        var foodDeleteBtn = document.getElementById("food_deleteBtn");

        //When clicked, see all food options
        seeFoodButton.addEventListener("click", function(){
            var theUserID = Number(userIDInput.value);
            if (userIDInput.value.length == 0){
                theUserID = 0;
            } else {

            }
            toSend.UserID = theUserID;
            var jsonString = JSON.stringify(toSend);

            var xhr = new XMLHttpRequest();
            xhr.open('POST', '/getAllFoodMongo', true);
            xhr.setRequestHeader("Content-Type", "application/json");
            xhr.addEventListener('readystatechange', function(){
                if(xhr.readyState === XMLHttpRequest.DONE && xhr.status === 200){
                    var item = xhr.responseText;
                    var dataOBJ = JSON.parse(item);
                    if (dataOBJ.SuccessMessage == "Success") {
                        //Clear all arrays, just in case
                        hotdogIDArray = []; //Declare Array for id reference use
                        hamburgerIDArray = []; //Declare Array for id reference use
                        hotdogsArray = []; //All the hot dog object arrays
                        hamburgArray = []; //All the hamburger object arrays
                        hamSeerDiv.innerHTML = ""; //Clear hamseer div
                        hdogSeer.innerHTML = ""; //Clear hotdog div
                        var hotdogsGoodCount = true; //Used for not displaying hotdogs
                        var hamburgerGoodCount = true; //Used for displaying hotdogs
                        //Update Hotdog and Hamburger Arrays
                        //Update Hamburger Arrays
                        if (dataOBJ.HaveHamburgers == false){
                            console.log("DEBUG: We have no burgers to deliver");
                            hamburgerGoodCount = false;
                        } else {
                            for (var x = 0; x < dataOBJ.TheHamburgers.length; x++) {
                                var condimentsString = ""; //Declare string to display Condiments
                                hamburgerChoice = hamburgerChoice + 1;
                                aHamburger.BurgerType = dataOBJ.TheHamburgers[x].BurgerType;
                                if (dataOBJ.TheHamburgers[x].Condiments.length == 0){
                                    console.log("DEBUG: This Hamburger has no condiments.");
                                    condimentsString = "No condiments";
                                } else {
                                    for (var i = 0; i < dataOBJ.TheHamburgers[x].Condiments.length; i++){
                                        condimentsString = condimentsString + dataOBJ.TheHamburgers[x].Condiments[i] + " ";
                                    }
                                    aHamburger.Condiments = condimentsString;
                                }
                                aHamburger.Calories = dataOBJ.TheHamburgers[x].Calories;
                                aHamburger.Name = dataOBJ.TheHamburgers[x].Name;
                                aHamburger.FoodID = dataOBJ.TheHamburgers[x].FoodID;
                                aHamburger.UserID = dataOBJ.TheHamburgers[x].UserID;
                                aHamburger.PhotoID = dataOBJ.TheHamburgers[x].PhotoID;
                                aHamburger.PhotoSrc = dataOBJ.TheHamburgers[x].PhotoSrc;
                                console.log("Here is the src in this hamburger: " + dataOBJ.TheHamburgers[x].PhotoSrc); //DEBUG
                                aHamburger.DateCreated = dataOBJ.TheHamburgers[x].DateCreated;
                                aHamburger.DateUpdated = dataOBJ.TheHamburgers[x].DateUpdated;
                                hamburgArray.push(aHamburger); //Add the Hamburger to the Hamburger array
                            }
                        }
                        //Update Hotdog arrays
                        if (dataOBJ.HaveHotDogs == false){
                            console.log("DEBUG: NO HOT DOGS TO UPDATE");
                            hotdogsGoodCount = false;
                        } else {
                            for (var y = 0; y < dataOBJ.TheHotDogs.length; y++) {
                                var condimentsString = ""; //Declare string to display Condiments
                                hotDogChoice = hotDogChoice + 1;
                                aHotDog.HotDogType = dataOBJ.TheHotDogs[y].HotDogType;
                                if (dataOBJ.TheHotDogs[y].Condiments.length == 0){
                                    console.log("DEBUG: This hotdog has no condiments.");
                                    condimentsString = "No Condiments";
                                } else{
                                    for (var i = 0; i < dataOBJ.TheHotDogs[y].Condiments.length; i++){
                                        condimentsString = condimentsString + dataOBJ.TheHotDogs[y].Condiments[i] + " ";
                                    }
                                    aHotDog.Condiments = condimentsString;
                                }
                                aHotDog.Calories = dataOBJ.TheHotDogs[y].Calories;
                                aHotDog.Name = dataOBJ.TheHotDogs[y].Name;
                                aHotDog.FoodID = dataOBJ.TheHotDogs[y].FoodID;
                                aHotDog.UserID = dataOBJ.TheHotDogs[y].UserID;
                                aHotDog.PhotoID = dataOBJ.TheHotDogs[y].PhotoID;
                                aHotDog.PhotoSrc = dataOBJ.TheHotDogs[y].PhotoSrc;
                                aHotDog.DateCreated = dataOBJ.TheHotDogs[y].DateCreated;
                                aHotDog.DateUpdated = dataOBJ.TheHotDogs[y].DateUpdated;
                                hotdogsArray.push(aHotDog); //Add the hotdog to the hotdog array
                            }
                        }
                        
                        //Display all Hamburgers
                        if (hamburgerGoodCount == false){
                            console.log("We won't be displaying hamburgers.");
                        } else {
                            for (var y = 0; y < dataOBJ.TheHamburgers.length; y++) {
                                //Create container for Hamburger info
                                var udContainerDiv = document.createElement("div");
                                udContainerDiv.setAttribute("id", "udContainerDiv");

                                //Create ID info section
                                var udcFieldInfoTxtDiv = document.createElement("div");
                                udcFieldInfoTxtDiv.setAttribute("id", "udcFieldInfoTxtDiv");
                                var udcfText = document.createElement("p");
                                udcfText.setAttribute("id", "udcfText");
                                udcfText.innerHTML = "Food Order Hamburger";
                                udcFieldInfoTxtDiv.appendChild(udcfText); //Append text to Div
                                udContainerDiv.appendChild(udcFieldInfoTxtDiv); //Append infoDiv to container
                                var udcFieldInfoTxtDiv = document.createElement("div");
                                udcFieldInfoTxtDiv.setAttribute("id", "udcFieldInfoTxtDiv");
                                var udcfText = document.createElement("p");
                                udcfText.setAttribute("id", "udcfText");
                                udcfText.innerHTML = y;
                                udcFieldInfoTxtDiv.appendChild(udcfText); //Append text to Div
                                udContainerDiv.appendChild(udcFieldInfoTxtDiv); //Append infoDiv to container

                                //Create Type info section
                                var udcFieldInfoTxtDiv = document.createElement("div");
                                udcFieldInfoTxtDiv.setAttribute("id", "udcFieldInfoTxtDiv");
                                var udcfText = document.createElement("p");
                                udcfText.setAttribute("id", "udcfText");
                                udcfText.innerHTML = "Hamburger Type";
                                udcFieldInfoTxtDiv.appendChild(udcfText); //Append text to Div
                                udContainerDiv.appendChild(udcFieldInfoTxtDiv); //Append infoDiv to container
                                var udcFieldInfoTxtDiv = document.createElement("div");
                                udcFieldInfoTxtDiv.setAttribute("id", "udcFieldInfoTxtDiv");
                                var udcfText = document.createElement("p");
                                udcfText.setAttribute("id", "udcfText");
                                udcfText.innerHTML = dataOBJ.TheHamburgers[y].BurgerType;
                                udcFieldInfoTxtDiv.appendChild(udcfText); //Append text to Div
                                udContainerDiv.appendChild(udcFieldInfoTxtDiv); //Append infoDiv to container

                                //Create Condiment info section
                                var condimentsString = ""; //Declare string to display Condiments
                                var udcFieldInfoTxtDiv = document.createElement("div");
                                udcFieldInfoTxtDiv.setAttribute("id", "udcFieldInfoTxtDiv");
                                var udcfText = document.createElement("p");
                                udcfText.setAttribute("id", "udcfText");
                                udcfText.innerHTML = "Condiment";
                                udcFieldInfoTxtDiv.appendChild(udcfText); //Append text to Div
                                udContainerDiv.appendChild(udcFieldInfoTxtDiv); //Append infoDiv to container
                                var udcFieldInfoTxtDiv = document.createElement("div");
                                udcFieldInfoTxtDiv.setAttribute("id", "udcFieldInfoTxtDiv");
                                var udcfText = document.createElement("p");
                                udcfText.setAttribute("id", "udcfText");
                                if (dataOBJ.TheHamburgers[y].Condiments.length == 0){
                                    console.log("DEBUG: This Hamburger has no condiments.");
                                    condimentsString = "No condiments";
                                    udcfText.innerHTML = condimentsString
                                } else {
                                    for (var i = 0; i < dataOBJ.TheHamburgers[y].Condiments.length; i++){
                                        condimentsString = condimentsString + dataOBJ.TheHamburgers[y].Condiments[i] + " ";
                                    }
                                    udcfText.innerHTML = condimentsString
                                }
                                udcFieldInfoTxtDiv.appendChild(udcfText); //Append text to Div
                                udContainerDiv.appendChild(udcFieldInfoTxtDiv); //Append infoDiv to container

                                //Create Calories info section
                                var udcFieldInfoTxtDiv = document.createElement("div");
                                udcFieldInfoTxtDiv.setAttribute("id", "udcFieldInfoTxtDiv");
                                var udcfText = document.createElement("p");
                                udcfText.setAttribute("id", "udcfText");
                                udcfText.innerHTML = "Calories";
                                udcFieldInfoTxtDiv.appendChild(udcfText); //Append text to Div
                                udContainerDiv.appendChild(udcFieldInfoTxtDiv); //Append infoDiv to container
                                var udcFieldInfoTxtDiv = document.createElement("div");
                                udcFieldInfoTxtDiv.setAttribute("id", "udcFieldInfoTxtDiv");
                                var udcfText = document.createElement("p");
                                udcfText.setAttribute("id", "udcfText");
                                udcfText.innerHTML = dataOBJ.TheHamburgers[y].Calories;
                                udcFieldInfoTxtDiv.appendChild(udcfText); //Append text to Div
                                udContainerDiv.appendChild(udcFieldInfoTxtDiv); //Append infoDiv to container

                                //Create Name info section
                                var udcFieldInfoTxtDiv = document.createElement("div");
                                udcFieldInfoTxtDiv.setAttribute("id", "udcFieldInfoTxtDiv");
                                var udcfText = document.createElement("p");
                                udcfText.setAttribute("id", "udcfText");
                                udcfText.innerHTML = "Name";
                                udcFieldInfoTxtDiv.appendChild(udcfText); //Append text to Div
                                udContainerDiv.appendChild(udcFieldInfoTxtDiv); //Append infoDiv to container
                                var udcFieldInfoTxtDiv = document.createElement("div");
                                udcFieldInfoTxtDiv.setAttribute("id", "udcFieldInfoTxtDiv");
                                var udcfText = document.createElement("p");
                                udcfText.setAttribute("id", "udcfText");
                                udcfText.innerHTML = dataOBJ.TheHamburgers[y].Name;
                                udcFieldInfoTxtDiv.appendChild(udcfText); //Append text to Div
                                udContainerDiv.appendChild(udcFieldInfoTxtDiv); //Append infoDiv to container

                                //Create FoodID Info Section
                                var udcFieldInfoTxtDiv = document.createElement("div");
                                udcFieldInfoTxtDiv.setAttribute("id", "udcFieldInfoTxtDiv");
                                var udcfText = document.createElement("p");
                                udcfText.setAttribute("id", "udcfText");
                                udcfText.innerHTML = "FoodID";
                                udcFieldInfoTxtDiv.appendChild(udcfText); //Append text to Div
                                udContainerDiv.appendChild(udcFieldInfoTxtDiv); //Append infoDiv to container
                                var udcFieldInfoTxtDiv = document.createElement("div");
                                udcFieldInfoTxtDiv.setAttribute("id", "udcFieldInfoTxtDiv");
                                var udcfText = document.createElement("p");
                                udcfText.setAttribute("id", "udcfText");
                                udcfText.innerHTML = dataOBJ.TheHamburgers[y].FoodID;
                                udcFieldInfoTxtDiv.appendChild(udcfText); //Append text to Div
                                udContainerDiv.appendChild(udcFieldInfoTxtDiv); //Append infoDiv to container

                                //Create UserID Info Section
                                var udcFieldInfoTxtDiv = document.createElement("div");
                                udcFieldInfoTxtDiv.setAttribute("id", "udcFieldInfoTxtDiv");
                                var udcfText = document.createElement("p");
                                udcfText.setAttribute("id", "udcfText");
                                udcfText.innerHTML = "UserID";
                                udcFieldInfoTxtDiv.appendChild(udcfText); //Append text to Div
                                udContainerDiv.appendChild(udcFieldInfoTxtDiv); //Append infoDiv to container
                                var udcFieldInfoTxtDiv = document.createElement("div");
                                udcFieldInfoTxtDiv.setAttribute("id", "udcFieldInfoTxtDiv");
                                var udcfText = document.createElement("p");
                                udcfText.setAttribute("id", "udcfText");
                                udcfText.innerHTML = dataOBJ.TheHamburgers[y].UserID;
                                udcFieldInfoTxtDiv.appendChild(udcfText); //Append text to Div
                                udContainerDiv.appendChild(udcFieldInfoTxtDiv); //Append infoDiv to container

                                //Create Photo Section
                                var udcFieldInfoTxtDiv = document.createElement("div");
                                udcFieldInfoTxtDiv.setAttribute("id", "udcFieldInfoTxtDiv");
                                var udcfText = document.createElement("p");
                                udcfText.setAttribute("id", "udcfText");
                                udcfText.innerHTML = "Hamburger Photo";
                                udcFieldInfoTxtDiv.appendChild(udcfText); //Append text to Div
                                udContainerDiv.appendChild(udcFieldInfoTxtDiv); //Append infoDiv to container
                                var udcFieldInfoTxtDiv = document.createElement("div");
                                udcFieldInfoTxtDiv.setAttribute("id", "udcFieldInfoTxtDiv");
                                var udfcPic = document.createElement("img");
                                udfcPic.setAttribute("id", "udfcFeildInfoPic");
                                var photoThere = srcChecker(dataOBJ.TheHamburgers[y], aHotDog, 0); //Check to see if photo exists
                                if (photoThere == true){
                                    console.log("We found the source: " + dataOBJ.TheHamburgers[y].PhotoSrc); //DEBUG
                                    udfcPic.src = String(dataOBJ.TheHamburgers[y].PhotoSrc);
                                    udfcPic.setAttribute("alt", "Food Pic: " + dataOBJ.TheHamburgers[y].PhotoSrc);
                                } else {
                                    console.log("Source not found: " + dataOBJ.TheHamburgers[y].PhotoSrc);
                                    udfcPic.setAttribute("src", "static/images/png/Photo-Unavailable.png");
                                    udfcPic.setAttribute("alt", "Food Pic Not Found.");
                                }
                                udcFieldInfoTxtDiv.appendChild(udfcPic); //Append text to Div
                                udContainerDiv.appendChild(udcFieldInfoTxtDiv); //Append infoDiv to container

                                //Create DateCreated Info Section
                                var udcFieldInfoTxtDiv = document.createElement("div");
                                udcFieldInfoTxtDiv.setAttribute("id", "udcFieldInfoTxtDiv");
                                var udcfText = document.createElement("p");
                                udcfText.setAttribute("id", "udcfText");
                                udcfText.innerHTML = "DateCreated";
                                udcFieldInfoTxtDiv.appendChild(udcfText); //Append text to Div
                                udContainerDiv.appendChild(udcFieldInfoTxtDiv); //Append infoDiv to container
                                var udcFieldInfoTxtDiv = document.createElement("div");
                                udcFieldInfoTxtDiv.setAttribute("id", "udcFieldInfoTxtDiv");
                                var udcfText = document.createElement("p");
                                udcfText.setAttribute("id", "udcfText");
                                udcfText.innerHTML = dataOBJ.TheHamburgers[y].DateCreated;
                                udcFieldInfoTxtDiv.appendChild(udcfText); //Append text to Div
                                udContainerDiv.appendChild(udcFieldInfoTxtDiv); //Append infoDiv to container

                                //Create DateUpdated Info Section
                                var udcFieldInfoTxtDiv = document.createElement("div");
                                udcFieldInfoTxtDiv.setAttribute("id", "udcFieldInfoTxtDiv");
                                var udcfText = document.createElement("p");
                                udcfText.setAttribute("id", "udcfText");
                                udcfText.innerHTML = "DateUpdated";
                                udcFieldInfoTxtDiv.appendChild(udcfText); //Append text to Div
                                udContainerDiv.appendChild(udcFieldInfoTxtDiv); //Append infoDiv to container
                                var udcFieldInfoTxtDiv = document.createElement("div");
                                udcFieldInfoTxtDiv.setAttribute("id", "udcFieldInfoTxtDiv");
                                var udcfText = document.createElement("p");
                                udcfText.setAttribute("id", "udcfText");
                                udcfText.innerHTML = dataOBJ.TheHamburgers[y].DateUpdated;
                                udcFieldInfoTxtDiv.appendChild(udcfText); //Append text to Div
                                udContainerDiv.appendChild(udcFieldInfoTxtDiv); //Append infoDiv to container
                                 
                                //All the divs fields for the container are added. Add this to the hamseer!
                                hamSeerDiv.appendChild(udContainerDiv);
                            }
                            hamSeerDiv.style.display = "block"; //Display the formatted Hamburger Divs
                        }
                        
                        //Display all HotDogs
                        if (hotdogsGoodCount == false){
                            console.log("We won't be displaying hot dogs.");
                        } else {
                            for (var i = 0; i < dataOBJ.TheHotDogs.length; i++) {
                                //Create container for hotdog info
                                var udContainerDiv = document.createElement("div");
                                udContainerDiv.setAttribute("id", "udContainerDiv");

                                //Create ID info section
                                var udcFieldInfoTxtDiv = document.createElement("div");
                                udcFieldInfoTxtDiv.setAttribute("id", "udcFieldInfoTxtDiv");
                                var udcfText = document.createElement("p");
                                udcfText.setAttribute("id", "udcfText");
                                udcfText.innerHTML = "Food Order Hotdog";
                                udcFieldInfoTxtDiv.appendChild(udcfText); //Append text to Div
                                udContainerDiv.appendChild(udcFieldInfoTxtDiv); //Append infoDiv to container
                                var udcFieldInfoTxtDiv = document.createElement("div");
                                udcFieldInfoTxtDiv.setAttribute("id", "udcFieldInfoTxtDiv");
                                var udcfText = document.createElement("p");
                                udcfText.setAttribute("id", "udcfText");
                                udcfText.innerHTML = i;
                                udcFieldInfoTxtDiv.appendChild(udcfText); //Append text to Div
                                udContainerDiv.appendChild(udcFieldInfoTxtDiv); //Append infoDiv to container

                                //Create Type info section
                                var udcFieldInfoTxtDiv = document.createElement("div");
                                udcFieldInfoTxtDiv.setAttribute("id", "udcFieldInfoTxtDiv");
                                var udcfText = document.createElement("p");
                                udcfText.setAttribute("id", "udcfText");
                                udcfText.innerHTML = "Hotdog Type";
                                udcFieldInfoTxtDiv.appendChild(udcfText); //Append text to Div
                                udContainerDiv.appendChild(udcFieldInfoTxtDiv); //Append infoDiv to container
                                var udcFieldInfoTxtDiv = document.createElement("div");
                                udcFieldInfoTxtDiv.setAttribute("id", "udcFieldInfoTxtDiv");
                                var udcfText = document.createElement("p");
                                udcfText.setAttribute("id", "udcfText");
                                udcfText.innerHTML = dataOBJ.TheHotDogs[i].HotDogType;
                                udcFieldInfoTxtDiv.appendChild(udcfText); //Append text to Div
                                udContainerDiv.appendChild(udcFieldInfoTxtDiv); //Append infoDiv to container

                                //Create Condiment info section
                                var condimentsString = ""; //Declare string to display Condiments
                                var udcFieldInfoTxtDiv = document.createElement("div");
                                udcFieldInfoTxtDiv.setAttribute("id", "udcFieldInfoTxtDiv");
                                var udcfText = document.createElement("p");
                                udcfText.setAttribute("id", "udcfText");
                                udcfText.innerHTML = "Condiment";
                                udcFieldInfoTxtDiv.appendChild(udcfText); //Append text to Div
                                udContainerDiv.appendChild(udcFieldInfoTxtDiv); //Append infoDiv to container
                                var udcFieldInfoTxtDiv = document.createElement("div");
                                udcFieldInfoTxtDiv.setAttribute("id", "udcFieldInfoTxtDiv");
                                var udcfText = document.createElement("p");
                                udcfText.setAttribute("id", "udcfText");
                                if (dataOBJ.TheHotDogs[i].Condiments.length == 0){
                                    console.log("DEBUG: This Hamburger has no condiments.");
                                    condimentsString = "No condiments";
                                    udcfText.innerHTML = condimentsString
                                } else {
                                    for (var n = 0; n < dataOBJ.TheHotDogs[i].Condiments.length; n++){
                                        condimentsString = condimentsString + dataOBJ.TheHotDogs[i].Condiments[n] + " ";
                                    }
                                    udcfText.innerHTML = condimentsString
                                }
                                udcFieldInfoTxtDiv.appendChild(udcfText); //Append text to Div
                                udContainerDiv.appendChild(udcFieldInfoTxtDiv); //Append infoDiv to container

                                //Create Calories info section
                                var udcFieldInfoTxtDiv = document.createElement("div");
                                udcFieldInfoTxtDiv.setAttribute("id", "udcFieldInfoTxtDiv");
                                var udcfText = document.createElement("p");
                                udcfText.setAttribute("id", "udcfText");
                                udcfText.innerHTML = "Calories";
                                udcFieldInfoTxtDiv.appendChild(udcfText); //Append text to Div
                                udContainerDiv.appendChild(udcFieldInfoTxtDiv); //Append infoDiv to container
                                var udcFieldInfoTxtDiv = document.createElement("div");
                                udcFieldInfoTxtDiv.setAttribute("id", "udcFieldInfoTxtDiv");
                                var udcfText = document.createElement("p");
                                udcfText.setAttribute("id", "udcfText");
                                udcfText.innerHTML = dataOBJ.TheHotDogs[i].Calories;
                                udcFieldInfoTxtDiv.appendChild(udcfText); //Append text to Div
                                udContainerDiv.appendChild(udcFieldInfoTxtDiv); //Append infoDiv to container

                                //Create Name info section
                                var udcFieldInfoTxtDiv = document.createElement("div");
                                udcFieldInfoTxtDiv.setAttribute("id", "udcFieldInfoTxtDiv");
                                var udcfText = document.createElement("p");
                                udcfText.setAttribute("id", "udcfText");
                                udcfText.innerHTML = "Name";
                                udcFieldInfoTxtDiv.appendChild(udcfText); //Append text to Div
                                udContainerDiv.appendChild(udcFieldInfoTxtDiv); //Append infoDiv to container
                                var udcFieldInfoTxtDiv = document.createElement("div");
                                udcFieldInfoTxtDiv.setAttribute("id", "udcFieldInfoTxtDiv");
                                var udcfText = document.createElement("p");
                                udcfText.setAttribute("id", "udcfText");
                                udcfText.innerHTML = dataOBJ.TheHotDogs[i].Name;
                                udcFieldInfoTxtDiv.appendChild(udcfText); //Append text to Div
                                udContainerDiv.appendChild(udcFieldInfoTxtDiv); //Append infoDiv to container

                                //Create FoodID section
                                var udcFieldInfoTxtDiv = document.createElement("div");
                                udcFieldInfoTxtDiv.setAttribute("id", "udcFieldInfoTxtDiv");
                                var udcfText = document.createElement("p");
                                udcfText.setAttribute("id", "udcfText");
                                udcfText.innerHTML = "FoodID";
                                udcFieldInfoTxtDiv.appendChild(udcfText); //Append text to Div
                                udContainerDiv.appendChild(udcFieldInfoTxtDiv); //Append infoDiv to container
                                var udcFieldInfoTxtDiv = document.createElement("div");
                                udcFieldInfoTxtDiv.setAttribute("id", "udcFieldInfoTxtDiv");
                                var udcfText = document.createElement("p");
                                udcfText.setAttribute("id", "udcfText");
                                udcfText.innerHTML = dataOBJ.TheHotDogs[i].FoodID;
                                udcFieldInfoTxtDiv.appendChild(udcfText); //Append text to Div
                                udContainerDiv.appendChild(udcFieldInfoTxtDiv); //Append infoDiv to container

                                //Create UserID section
                                var udcFieldInfoTxtDiv = document.createElement("div");
                                udcFieldInfoTxtDiv.setAttribute("id", "udcFieldInfoTxtDiv");
                                var udcfText = document.createElement("p");
                                udcfText.setAttribute("id", "udcfText");
                                udcfText.innerHTML = "UserID";
                                udcFieldInfoTxtDiv.appendChild(udcfText); //Append text to Div
                                udContainerDiv.appendChild(udcFieldInfoTxtDiv); //Append infoDiv to container
                                var udcFieldInfoTxtDiv = document.createElement("div");
                                udcFieldInfoTxtDiv.setAttribute("id", "udcFieldInfoTxtDiv");
                                var udcfText = document.createElement("p");
                                udcfText.setAttribute("id", "udcfText");
                                udcfText.innerHTML = dataOBJ.TheHotDogs[i].UserID;
                                udcFieldInfoTxtDiv.appendChild(udcfText); //Append text to Div
                                udContainerDiv.appendChild(udcFieldInfoTxtDiv); //Append infoDiv to container

                                //Create Photo Section
                                var udcFieldInfoTxtDiv = document.createElement("div");
                                udcFieldInfoTxtDiv.setAttribute("id", "udcFieldInfoTxtDiv");
                                var udcfText = document.createElement("p");
                                udcfText.setAttribute("id", "udcfText");
                                udcfText.innerHTML = "Hotdog Photo";
                                udcFieldInfoTxtDiv.appendChild(udcfText); //Append text to Div
                                udContainerDiv.appendChild(udcFieldInfoTxtDiv); //Append infoDiv to container
                                var udcFieldInfoTxtDiv = document.createElement("div");
                                udcFieldInfoTxtDiv.setAttribute("id", "udcFieldInfoTxtDiv");
                                var udfcPic = document.createElement("img");
                                udfcPic.setAttribute("id", "udfcFeildInfoPic");
                                var photoThere = srcChecker(aHamburger, dataOBJ.TheHotDogs[i], 1); //Check to see if photo exists
                                if (photoThere == true){
                                    console.log("We found the source: " + dataOBJ.TheHotDogs[i].PhotoSrc); //DEBUG
                                    udfcPic.src = String(dataOBJ.TheHotDogs[i].PhotoSrc);
                                    udfcPic.setAttribute("alt", "Food Pic: " + dataOBJ.TheHotDogs[i].PhotoSrc);
                                } else {
                                    console.log("Source not found: " + dataOBJ.TheHotDogs[i].PhotoSrc);
                                    udfcPic.setAttribute("src", "static/images/png/Photo-Unavailable.png");
                                    udfcPic.setAttribute("alt", "Food Pic Not Found.");
                                }
                                udcFieldInfoTxtDiv.appendChild(udfcPic); //Append text to Div
                                udContainerDiv.appendChild(udcFieldInfoTxtDiv); //Append infoDiv to container

                                //Create DateCreated info section
                                var udcFieldInfoTxtDiv = document.createElement("div");
                                udcFieldInfoTxtDiv.setAttribute("id", "udcFieldInfoTxtDiv");
                                var udcfText = document.createElement("p");
                                udcfText.setAttribute("id", "udcfText");
                                udcfText.innerHTML = "DateCreated";
                                udcFieldInfoTxtDiv.appendChild(udcfText); //Append text to Div
                                udContainerDiv.appendChild(udcFieldInfoTxtDiv); //Append infoDiv to container
                                var udcFieldInfoTxtDiv = document.createElement("div");
                                udcFieldInfoTxtDiv.setAttribute("id", "udcFieldInfoTxtDiv");
                                var udcfText = document.createElement("p");
                                udcfText.setAttribute("id", "udcfText");
                                udcfText.innerHTML = dataOBJ.TheHotDogs[i].DateCreated;
                                udcFieldInfoTxtDiv.appendChild(udcfText); //Append text to Div
                                udContainerDiv.appendChild(udcFieldInfoTxtDiv); //Append infoDiv to container

                                //Create DateUpdated info section
                                var udcFieldInfoTxtDiv = document.createElement("div");
                                udcFieldInfoTxtDiv.setAttribute("id", "udcFieldInfoTxtDiv");
                                var udcfText = document.createElement("p");
                                udcfText.setAttribute("id", "udcfText");
                                udcfText.innerHTML = "DateUpdated";
                                udcFieldInfoTxtDiv.appendChild(udcfText); //Append text to Div
                                udContainerDiv.appendChild(udcFieldInfoTxtDiv); //Append infoDiv to container
                                var udcFieldInfoTxtDiv = document.createElement("div");
                                udcFieldInfoTxtDiv.setAttribute("id", "udcFieldInfoTxtDiv");
                                var udcfText = document.createElement("p");
                                udcfText.setAttribute("id", "udcfText");
                                udcfText.innerHTML = dataOBJ.TheHotDogs[i].DateUpdated;
                                udcFieldInfoTxtDiv.appendChild(udcfText); //Append text to Div
                                udContainerDiv.appendChild(udcFieldInfoTxtDiv); //Append infoDiv to container

                                //All the divs fields for the container are added. Add this to the hamseer!
                                hdogSeerDiv.appendChild(udContainerDiv);

                            }
                            hdogSeerDiv.style.display = "block"; //Display the formattted Hotdog divs
                        }
                        
                        foodUpdater.style.display = "block"; //Display the foodUpdater div

                    } else {
                        //No data retrieved
                        console.log("Either User has no data or no data could be retrieved.");
                        alert("Either User has no data or no data could be retrieved.");
                        //DEBUG: PRINT A MESSAGE TO USER HERE.
                    } 
                }
            });
            xhr.send(jsonString);
        });

        //Call the food deleter function to run a query and delete food,(if the selection is appropriate)
        foodDeleteBtn.addEventListener("click", function(){
            //Declare input variable names to work with
            var foodChoice = document.getElementById("foodChoice");
            var foodID = document.getElementById("foodID");
            var userIDElement = document.getElementById("theUserID");
            var theUserID = Number(userIDElement.value);
            
            //Assign fields to pass to food deleter
            if (foodChoice.value == "hotdog"){
                //See if the foodID field was assigned correctly
                if (Number(foodID.value) <= 0){
                    //bad selection
                    console.log("User inputted a wrong selection: " + foodID.value);
                    alert("Please enter a foodID listed below.");
                    //location.reload(true);
                } else {    
                    //Good Selection
                    var foodNumber = Number(foodID.value);
                    foodDeleter(foodChoice.value, foodNumber, theUserID);
                }
            } else if (foodChoice.value == "hamburger"){
                //See if the foodID field was assigned correctly
                if (Number(foodID.value) <= 0){
                    //bad selection
                    console.log("User inputted a wrong selection: " + foodID.value);
                    alert("Please enter a foodID listed below.");
                } else {    
                    //Good Selection
                    var foodNumber = Number(foodID.value);
                    foodDeleter(foodChoice.value, foodNumber, theUserID);
                }
            } else {
                console.log("Error, User selected nothing in the foodchoice" +
                " field or wrong value got put in place.");
                alert("Please select hamburger or hotdog food to delete.");
                location.reload(true);
            }
        });
        //Update food upon the correct selection
        foodUpdateBtn.addEventListener("click", function(){
            //Declare input variable names to work with
            var hadPhoto = document.getElementById("hiddenHasPhoto"); //HiddenPhotoValue
            var foodIDNumber = document.getElementById("foodID"); //foodID Numb
            var photoInput = document.getElementById("photo-update-input"); //Photo Input
            var updatePicForm = document.getElementById("update-picture-form"); //The photo form
            /* CHECK TO SEE IF THERE'S A PHOTO SUBMITTED TO CHANGE */
            var photoSubmission = fileUploadCheck();
            if (photoSubmission == true){
                //Begin process of submitting submitted photo for an update
                hadPhoto.value = "has_photo";
            } else {
                hadPhoto.value = "no_photo"; //Change to no photo form type and remove photoinput before submission
                //updatePicForm.setAttribute("enctype", "application/x-www-form-urlencoded");
                photoInput.parentNode.removeChild(photoInput);
            }
            /* UPDATE CERTAIN FIELDS FOR PROCESSESING */
            var theUserID = document.getElementById("hiddenUserID"); //Hidden User ID
            var enteredUserID = document.getElementById("theUserID"); //UserID enterd by IT or Admin User
            //Check to see if a User ID was entered for an update
            if (Number(enteredUserID.value) <= 0) {
                theUserID.value = userID; // NEED TO DO THIS FOR THE USER
            } else {
                theUserID.value = enteredUserID.value; // NEED TO DO THIS FOR THE USER
            }
            var theUpdateForm = document.getElementById("update-picture-form"); //Update Form

            //Assign fields to pass to food changer
            if (foodChoice.value == "hotdog"){
                //See if the foodID field was assigned correctly
                if (Number(foodIDNumber.value) <= 0){
                    //bad selection
                    alert("Please enter a foodID listed below.");
                    location.reload(true);
                } else {    
                    //Good Selection
                    theUpdateForm.submit();
                }
            } else if (foodChoice.value == "hamburger"){
                //See if the foodID field was assigned correctly
                if (Number(foodIDNumber) <= 0){
                    //bad selection
                    alert("Please enter a foodID listed below.");
                    location.reload(true);
                } else {    
                    //Good Selection
                    theUpdateForm.submit();
                }
            } else {
                console.log("Error, User selected nothing in the foodchoice" +
                " field or wrong value got put in place.");
                alert("Please select hamburger or hotdog food to update.");
                location.reload(true);
            }
        });
        //Hide all foods
        hideFoodButton.addEventListener("click", function(){
            location.reload(true);
        });
    </script>
{{end}}
{{/*ENDING OF ADMIN ACTION PAGE */}}
{{/* BEGINNING OF IT ACTION PAGE */}}
{{define "IT-action"}}
    {{/* Divs for javascript refference*/}}
    <div class="actionDiv">
        <img src="static/images/jpg/IT-GUY.jpg"  class="actionimg" alt="IT Person">
        <br><br>
        <p class="actionInstructionText">Okay IT person, what data would you like to read/make?</p>
        <br>
        {{/* See food section...maybe update it too */}}
        <div id="foodSeeSectionDiv">
            <button id="actionInstructionButton">
                SEE FOOD
            </button>
            <button id="actionInstructionButton2">
                HIDE FOOD
            </button>
            <input type="number" id="userID" name="userID" placeholder="userID" maxlength=8>
            <div id="foodSeer">
                <div id="foodUpdater">
                    <form id="update-picture-form" name="update-picture-form"
                    enctype="multipart/form-data" method="POST" action="/mainPage" onload="">
                        <div class="formitems">
                            <select name="foodChoice" id="foodChoice">
                                <option value="hotdog">hotdog</option>
                                <option value="hamburger">hamburger</option>
                            </select>
                            <input type="number" id="foodID" name="foodID" placeholder="foodID Number" minlength=1 maxlength=20>
                            <input type="number" id="theUserID" name="theUserID" placeholder="user ID" minlength=1 maxlength=20>
                            <input type="text" id="foodType" name="foodType" placeholder="foodType" minlength=1 maxlength=48>
                            <input type="text" id="condimentType" name="condimentType" placeholder="condiments" minlength=1 maxlength=48>
                            <input type="number" id="calories" name="calories" placeholder="calories" minlength=1 maxlength=8>
                            <input type="text" id="foodName" name="foodName" placeholder="foodName" minlength=1 maxlength=48>
                            <div id="photo_updater">
                                <p>Update Photo:</p>
                                <input id="photo-update-input" type="file" accept=".png,.jpg" name="newFile">
                                <input id="hiddenFoodID" type="hidden" name="hiddenFoodID">
                                <input id="hiddenUserID" type="hidden" name="hiddenUserID">
                                <input id="hiddenCurrentSRC" type="hidden" name="hiddenCurrentSRC">
                                <input id="hiddenPhotoID" type="hidden" name="hiddenPhotoID">
                                <input id="hiddenFoodType" type="hidden" name="hiddenFoodType">
                            <div>
                        </div>
                        <input type="hidden" id="hiddenFoodAction" name="hiddenFoodAction" value="food_update">
                        <input type="hidden" id="hiddenHasPhoto" name="hiddenHasPhoto">
                    </form>
                    
                    <button id="food_UpdateBtn">
                        Update Food
                    </button>
                    <button id="food_deleteBtn">
                        Delete food
                    </button>
                </div>
                <div id="hamSeer">

                </div>
                <div id="hdogSeer">

                </div>
            </div>
        </div>
        {{/* Make food section */}}
        <div id="foodMakeSectionDiv">
            <p class="actionInstructionText">MAKE FOOD</p>
            <br>
            <button id="actionChoice" onclick="revealFoodForm(2)">
                MAKE HOTDOG
            </button>
            <br>
            <button id="actionChoice" onclick="revealFoodForm(3)">
                MAKE HAMBURGER
            </button>
            <div id="foodFormDiv">
                
            </div>
            <br>
        </div>
        {{/* DEBUG posting section
        
            <div id="DEBUGpostDiv">
            <form id="DEBUGpostForm" enctype="multipart/form-data" method="POST" action="/mainPage">
                <input type="text" id="DEBUGfakeInput" name="DEBUGfakeInput">
                <input type="file" id="theTestFile" name="newFile">
                <input type="hidden" id="DEBUGHIDDIENINPUT" name="DEBUGHIDDIENINPUT" value="bigOof">
                <input type="hidden" id="hiddenFoodActiontest" name="hiddenFoodAction" value="test">
                <button id="theSubmitButton" name="theSubmitButton" onclick="testFormSubmit()">
                    Submit stuff!
                </button>
            </form>
        </div>
         */}}
    </div>
    <script>
        //On clicked, get all data food data for this User
        var seeFoodButton = document.getElementById("actionInstructionButton");
        var hideFoodButton = document.getElementById("actionInstructionButton2");
        var userIDInput = document.getElementById("userID");
        var foodSeerDiv = document.getElementById("foodSeer");
        var foodUpdater = document.getElementById("foodUpdater");
        var hdogSeerDiv = document.getElementById("hdogSeer");
        var hamSeerDiv = document.getElementById("hamSeer");
        var foodUpdateBtn = document.getElementById("food_UpdateBtn");
        var foodDeleteBtn = document.getElementById("food_deleteBtn");

        //When clicked, see all food options
        seeFoodButton.addEventListener("click", function(){
            var theUserID = Number(userIDInput.value);
            if (userIDInput.value.length == 0){
                theUserID = 0;
            } else {

            }
            toSend.UserID = theUserID;
            var jsonString = JSON.stringify(toSend);

            var xhr = new XMLHttpRequest();
            xhr.open('POST', '/getAllFoodMongo', true);
            xhr.setRequestHeader("Content-Type", "application/json");
            xhr.addEventListener('readystatechange', function(){
                if(xhr.readyState === XMLHttpRequest.DONE && xhr.status === 200){
                    var item = xhr.responseText;
                    var dataOBJ = JSON.parse(item);
                    if (dataOBJ.SuccessMessage == "Success") {
                        //Clear all arrays, just in case
                        hotdogIDArray = []; //Declare Array for id reference use
                        hamburgerIDArray = []; //Declare Array for id reference use
                        hotdogsArray = []; //All the hot dog object arrays
                        hamburgArray = []; //All the hamburger object arrays
                        hamSeerDiv.innerHTML = ""; //Clear hamseer div
                        hdogSeer.innerHTML = ""; //Clear hotdog div
                        var hotdogsGoodCount = true; //Used for not displaying hotdogs
                        var hamburgerGoodCount = true; //Used for displaying hotdogs
                        //Update Hotdog and Hamburger Arrays
                        //Update Hamburger Arrays
                        if (dataOBJ.HaveHamburgers == false){
                            console.log("DEBUG: We have no burgers to deliver");
                            hamburgerGoodCount = false;
                        } else {
                            for (var x = 0; x < dataOBJ.TheHamburgers.length; x++) {
                                var condimentsString = ""; //Declare string to display Condiments
                                hamburgerChoice = hamburgerChoice + 1;
                                aHamburger.BurgerType = dataOBJ.TheHamburgers[x].BurgerType;
                                if (dataOBJ.TheHamburgers[x].Condiments.length == 0){
                                    console.log("DEBUG: This Hamburger has no condiments.");
                                    condimentsString = "No condiments";
                                } else {
                                    for (var i = 0; i < dataOBJ.TheHamburgers[x].Condiments.length; i++){
                                        condimentsString = condimentsString + dataOBJ.TheHamburgers[x].Condiments[i] + " ";
                                    }
                                    aHamburger.Condiments = condimentsString;
                                }
                                aHamburger.Calories = dataOBJ.TheHamburgers[x].Calories;
                                aHamburger.Name = dataOBJ.TheHamburgers[x].Name;
                                aHamburger.FoodID = dataOBJ.TheHamburgers[x].FoodID;
                                aHamburger.UserID = dataOBJ.TheHamburgers[x].UserID;
                                aHamburger.PhotoID = dataOBJ.TheHamburgers[x].PhotoID;
                                aHamburger.PhotoSrc = dataOBJ.TheHamburgers[x].PhotoSrc;
                                console.log("Here is the src in this hamburger: " + dataOBJ.TheHamburgers[x].PhotoSrc); //DEBUG
                                aHamburger.DateCreated = dataOBJ.TheHamburgers[x].DateCreated;
                                aHamburger.DateUpdated = dataOBJ.TheHamburgers[x].DateUpdated;
                                hamburgArray.push(aHamburger); //Add the Hamburger to the Hamburger array
                            }
                        }
                        //Update Hotdog arrays
                        if (dataOBJ.HaveHotDogs == false){
                            console.log("DEBUG: NO HOT DOGS TO UPDATE");
                            hotdogsGoodCount = false;
                        } else {
                            for (var y = 0; y < dataOBJ.TheHotDogs.length; y++) {
                                var condimentsString = ""; //Declare string to display Condiments
                                hotDogChoice = hotDogChoice + 1;
                                aHotDog.HotDogType = dataOBJ.TheHotDogs[y].HotDogType;
                                if (dataOBJ.TheHotDogs[y].Condiments.length == 0){
                                    console.log("DEBUG: This hotdog has no condiments.");
                                    condimentsString = "No Condiments";
                                } else{
                                    for (var i = 0; i < dataOBJ.TheHotDogs[y].Condiments.length; i++){
                                        condimentsString = condimentsString + dataOBJ.TheHotDogs[y].Condiments[i] + " ";
                                    }
                                    aHotDog.Condiments = condimentsString;
                                }
                                aHotDog.Calories = dataOBJ.TheHotDogs[y].Calories;
                                aHotDog.Name = dataOBJ.TheHotDogs[y].Name;
                                aHotDog.FoodID = dataOBJ.TheHotDogs[y].FoodID;
                                aHotDog.UserID = dataOBJ.TheHotDogs[y].UserID;
                                aHotDog.PhotoID = dataOBJ.TheHotDogs[y].PhotoID;
                                aHotDog.PhotoSrc = dataOBJ.TheHotDogs[y].PhotoSrc;
                                aHotDog.DateCreated = dataOBJ.TheHotDogs[y].DateCreated;
                                aHotDog.DateUpdated = dataOBJ.TheHotDogs[y].DateUpdated;
                                hotdogsArray.push(aHotDog); //Add the hotdog to the hotdog array
                            }
                        }
                        
                        //Display all Hamburgers
                        if (hamburgerGoodCount == false){
                            console.log("We won't be displaying hamburgers.");
                        } else {
                            for (var y = 0; y < dataOBJ.TheHamburgers.length; y++) {
                                //Create container for Hamburger info
                                var udContainerDiv = document.createElement("div");
                                udContainerDiv.setAttribute("id", "udContainerDiv");

                                //Create ID info section
                                var udcFieldInfoTxtDiv = document.createElement("div");
                                udcFieldInfoTxtDiv.setAttribute("id", "udcFieldInfoTxtDiv");
                                var udcfText = document.createElement("p");
                                udcfText.setAttribute("id", "udcfText");
                                udcfText.innerHTML = "Food Order Hamburger";
                                udcFieldInfoTxtDiv.appendChild(udcfText); //Append text to Div
                                udContainerDiv.appendChild(udcFieldInfoTxtDiv); //Append infoDiv to container
                                var udcFieldInfoTxtDiv = document.createElement("div");
                                udcFieldInfoTxtDiv.setAttribute("id", "udcFieldInfoTxtDiv");
                                var udcfText = document.createElement("p");
                                udcfText.setAttribute("id", "udcfText");
                                udcfText.innerHTML = y;
                                udcFieldInfoTxtDiv.appendChild(udcfText); //Append text to Div
                                udContainerDiv.appendChild(udcFieldInfoTxtDiv); //Append infoDiv to container

                                //Create Type info section
                                var udcFieldInfoTxtDiv = document.createElement("div");
                                udcFieldInfoTxtDiv.setAttribute("id", "udcFieldInfoTxtDiv");
                                var udcfText = document.createElement("p");
                                udcfText.setAttribute("id", "udcfText");
                                udcfText.innerHTML = "Hamburger Type";
                                udcFieldInfoTxtDiv.appendChild(udcfText); //Append text to Div
                                udContainerDiv.appendChild(udcFieldInfoTxtDiv); //Append infoDiv to container
                                var udcFieldInfoTxtDiv = document.createElement("div");
                                udcFieldInfoTxtDiv.setAttribute("id", "udcFieldInfoTxtDiv");
                                var udcfText = document.createElement("p");
                                udcfText.setAttribute("id", "udcfText");
                                udcfText.innerHTML = dataOBJ.TheHamburgers[y].BurgerType;
                                udcFieldInfoTxtDiv.appendChild(udcfText); //Append text to Div
                                udContainerDiv.appendChild(udcFieldInfoTxtDiv); //Append infoDiv to container

                                //Create Condiment info section
                                var condimentsString = ""; //Declare string to display Condiments
                                var udcFieldInfoTxtDiv = document.createElement("div");
                                udcFieldInfoTxtDiv.setAttribute("id", "udcFieldInfoTxtDiv");
                                var udcfText = document.createElement("p");
                                udcfText.setAttribute("id", "udcfText");
                                udcfText.innerHTML = "Condiment";
                                udcFieldInfoTxtDiv.appendChild(udcfText); //Append text to Div
                                udContainerDiv.appendChild(udcFieldInfoTxtDiv); //Append infoDiv to container
                                var udcFieldInfoTxtDiv = document.createElement("div");
                                udcFieldInfoTxtDiv.setAttribute("id", "udcFieldInfoTxtDiv");
                                var udcfText = document.createElement("p");
                                udcfText.setAttribute("id", "udcfText");
                                if (dataOBJ.TheHamburgers[y].Condiments.length == 0){
                                    console.log("DEBUG: This Hamburger has no condiments.");
                                    condimentsString = "No condiments";
                                    udcfText.innerHTML = condimentsString
                                } else {
                                    for (var i = 0; i < dataOBJ.TheHamburgers[y].Condiments.length; i++){
                                        condimentsString = condimentsString + dataOBJ.TheHamburgers[y].Condiments[i] + " ";
                                    }
                                    udcfText.innerHTML = condimentsString
                                }
                                udcFieldInfoTxtDiv.appendChild(udcfText); //Append text to Div
                                udContainerDiv.appendChild(udcFieldInfoTxtDiv); //Append infoDiv to container

                                //Create Calories info section
                                var udcFieldInfoTxtDiv = document.createElement("div");
                                udcFieldInfoTxtDiv.setAttribute("id", "udcFieldInfoTxtDiv");
                                var udcfText = document.createElement("p");
                                udcfText.setAttribute("id", "udcfText");
                                udcfText.innerHTML = "Calories";
                                udcFieldInfoTxtDiv.appendChild(udcfText); //Append text to Div
                                udContainerDiv.appendChild(udcFieldInfoTxtDiv); //Append infoDiv to container
                                var udcFieldInfoTxtDiv = document.createElement("div");
                                udcFieldInfoTxtDiv.setAttribute("id", "udcFieldInfoTxtDiv");
                                var udcfText = document.createElement("p");
                                udcfText.setAttribute("id", "udcfText");
                                udcfText.innerHTML = dataOBJ.TheHamburgers[y].Calories;
                                udcFieldInfoTxtDiv.appendChild(udcfText); //Append text to Div
                                udContainerDiv.appendChild(udcFieldInfoTxtDiv); //Append infoDiv to container

                                //Create Name info section
                                var udcFieldInfoTxtDiv = document.createElement("div");
                                udcFieldInfoTxtDiv.setAttribute("id", "udcFieldInfoTxtDiv");
                                var udcfText = document.createElement("p");
                                udcfText.setAttribute("id", "udcfText");
                                udcfText.innerHTML = "Name";
                                udcFieldInfoTxtDiv.appendChild(udcfText); //Append text to Div
                                udContainerDiv.appendChild(udcFieldInfoTxtDiv); //Append infoDiv to container
                                var udcFieldInfoTxtDiv = document.createElement("div");
                                udcFieldInfoTxtDiv.setAttribute("id", "udcFieldInfoTxtDiv");
                                var udcfText = document.createElement("p");
                                udcfText.setAttribute("id", "udcfText");
                                udcfText.innerHTML = dataOBJ.TheHamburgers[y].Name;
                                udcFieldInfoTxtDiv.appendChild(udcfText); //Append text to Div
                                udContainerDiv.appendChild(udcFieldInfoTxtDiv); //Append infoDiv to container

                                //Create FoodID Info Section
                                var udcFieldInfoTxtDiv = document.createElement("div");
                                udcFieldInfoTxtDiv.setAttribute("id", "udcFieldInfoTxtDiv");
                                var udcfText = document.createElement("p");
                                udcfText.setAttribute("id", "udcfText");
                                udcfText.innerHTML = "FoodID";
                                udcFieldInfoTxtDiv.appendChild(udcfText); //Append text to Div
                                udContainerDiv.appendChild(udcFieldInfoTxtDiv); //Append infoDiv to container
                                var udcFieldInfoTxtDiv = document.createElement("div");
                                udcFieldInfoTxtDiv.setAttribute("id", "udcFieldInfoTxtDiv");
                                var udcfText = document.createElement("p");
                                udcfText.setAttribute("id", "udcfText");
                                udcfText.innerHTML = dataOBJ.TheHamburgers[y].FoodID;
                                udcFieldInfoTxtDiv.appendChild(udcfText); //Append text to Div
                                udContainerDiv.appendChild(udcFieldInfoTxtDiv); //Append infoDiv to container

                                //Create UserID Info Section
                                var udcFieldInfoTxtDiv = document.createElement("div");
                                udcFieldInfoTxtDiv.setAttribute("id", "udcFieldInfoTxtDiv");
                                var udcfText = document.createElement("p");
                                udcfText.setAttribute("id", "udcfText");
                                udcfText.innerHTML = "UserID";
                                udcFieldInfoTxtDiv.appendChild(udcfText); //Append text to Div
                                udContainerDiv.appendChild(udcFieldInfoTxtDiv); //Append infoDiv to container
                                var udcFieldInfoTxtDiv = document.createElement("div");
                                udcFieldInfoTxtDiv.setAttribute("id", "udcFieldInfoTxtDiv");
                                var udcfText = document.createElement("p");
                                udcfText.setAttribute("id", "udcfText");
                                udcfText.innerHTML = dataOBJ.TheHamburgers[y].UserID;
                                udcFieldInfoTxtDiv.appendChild(udcfText); //Append text to Div
                                udContainerDiv.appendChild(udcFieldInfoTxtDiv); //Append infoDiv to container

                                //Create Photo Section
                                var udcFieldInfoTxtDiv = document.createElement("div");
                                udcFieldInfoTxtDiv.setAttribute("id", "udcFieldInfoTxtDiv");
                                var udcfText = document.createElement("p");
                                udcfText.setAttribute("id", "udcfText");
                                udcfText.innerHTML = "Hamburger Photo";
                                udcFieldInfoTxtDiv.appendChild(udcfText); //Append text to Div
                                udContainerDiv.appendChild(udcFieldInfoTxtDiv); //Append infoDiv to container
                                var udcFieldInfoTxtDiv = document.createElement("div");
                                udcFieldInfoTxtDiv.setAttribute("id", "udcFieldInfoTxtDiv");
                                var udfcPic = document.createElement("img");
                                udfcPic.setAttribute("id", "udfcFeildInfoPic");
                                var photoThere = srcChecker(dataOBJ.TheHamburgers[y], aHotDog, 0); //Check to see if photo exists
                                if (photoThere == true){
                                    console.log("We found the source: " + dataOBJ.TheHamburgers[y].PhotoSrc); //DEBUG
                                    udfcPic.src = String(dataOBJ.TheHamburgers[y].PhotoSrc);
                                    udfcPic.setAttribute("alt", "Food Pic: " + dataOBJ.TheHamburgers[y].PhotoSrc);
                                } else {
                                    console.log("Source not found: " + dataOBJ.TheHamburgers[y].PhotoSrc);
                                    udfcPic.setAttribute("src", "static/images/png/Photo-Unavailable.png");
                                    udfcPic.setAttribute("alt", "Food Pic Not Found.");
                                }
                                udcFieldInfoTxtDiv.appendChild(udfcPic); //Append text to Div
                                udContainerDiv.appendChild(udcFieldInfoTxtDiv); //Append infoDiv to container

                                //Create DateCreated Info Section
                                var udcFieldInfoTxtDiv = document.createElement("div");
                                udcFieldInfoTxtDiv.setAttribute("id", "udcFieldInfoTxtDiv");
                                var udcfText = document.createElement("p");
                                udcfText.setAttribute("id", "udcfText");
                                udcfText.innerHTML = "DateCreated";
                                udcFieldInfoTxtDiv.appendChild(udcfText); //Append text to Div
                                udContainerDiv.appendChild(udcFieldInfoTxtDiv); //Append infoDiv to container
                                var udcFieldInfoTxtDiv = document.createElement("div");
                                udcFieldInfoTxtDiv.setAttribute("id", "udcFieldInfoTxtDiv");
                                var udcfText = document.createElement("p");
                                udcfText.setAttribute("id", "udcfText");
                                udcfText.innerHTML = dataOBJ.TheHamburgers[y].DateCreated;
                                udcFieldInfoTxtDiv.appendChild(udcfText); //Append text to Div
                                udContainerDiv.appendChild(udcFieldInfoTxtDiv); //Append infoDiv to container

                                //Create DateUpdated Info Section
                                var udcFieldInfoTxtDiv = document.createElement("div");
                                udcFieldInfoTxtDiv.setAttribute("id", "udcFieldInfoTxtDiv");
                                var udcfText = document.createElement("p");
                                udcfText.setAttribute("id", "udcfText");
                                udcfText.innerHTML = "DateUpdated";
                                udcFieldInfoTxtDiv.appendChild(udcfText); //Append text to Div
                                udContainerDiv.appendChild(udcFieldInfoTxtDiv); //Append infoDiv to container
                                var udcFieldInfoTxtDiv = document.createElement("div");
                                udcFieldInfoTxtDiv.setAttribute("id", "udcFieldInfoTxtDiv");
                                var udcfText = document.createElement("p");
                                udcfText.setAttribute("id", "udcfText");
                                udcfText.innerHTML = dataOBJ.TheHamburgers[y].DateUpdated;
                                udcFieldInfoTxtDiv.appendChild(udcfText); //Append text to Div
                                udContainerDiv.appendChild(udcFieldInfoTxtDiv); //Append infoDiv to container
                                 
                                //All the divs fields for the container are added. Add this to the hamseer!
                                hamSeerDiv.appendChild(udContainerDiv);
                            }
                            hamSeerDiv.style.display = "block"; //Display the formatted Hamburger Divs
                        }
                        
                        //Display all HotDogs
                        if (hotdogsGoodCount == false){
                            console.log("We won't be displaying hot dogs.");
                        } else {
                            for (var i = 0; i < dataOBJ.TheHotDogs.length; i++) {
                                //Create container for hotdog info
                                var udContainerDiv = document.createElement("div");
                                udContainerDiv.setAttribute("id", "udContainerDiv");

                                //Create ID info section
                                var udcFieldInfoTxtDiv = document.createElement("div");
                                udcFieldInfoTxtDiv.setAttribute("id", "udcFieldInfoTxtDiv");
                                var udcfText = document.createElement("p");
                                udcfText.setAttribute("id", "udcfText");
                                udcfText.innerHTML = "Food Order Hotdog";
                                udcFieldInfoTxtDiv.appendChild(udcfText); //Append text to Div
                                udContainerDiv.appendChild(udcFieldInfoTxtDiv); //Append infoDiv to container
                                var udcFieldInfoTxtDiv = document.createElement("div");
                                udcFieldInfoTxtDiv.setAttribute("id", "udcFieldInfoTxtDiv");
                                var udcfText = document.createElement("p");
                                udcfText.setAttribute("id", "udcfText");
                                udcfText.innerHTML = i;
                                udcFieldInfoTxtDiv.appendChild(udcfText); //Append text to Div
                                udContainerDiv.appendChild(udcFieldInfoTxtDiv); //Append infoDiv to container

                                //Create Type info section
                                var udcFieldInfoTxtDiv = document.createElement("div");
                                udcFieldInfoTxtDiv.setAttribute("id", "udcFieldInfoTxtDiv");
                                var udcfText = document.createElement("p");
                                udcfText.setAttribute("id", "udcfText");
                                udcfText.innerHTML = "Hotdog Type";
                                udcFieldInfoTxtDiv.appendChild(udcfText); //Append text to Div
                                udContainerDiv.appendChild(udcFieldInfoTxtDiv); //Append infoDiv to container
                                var udcFieldInfoTxtDiv = document.createElement("div");
                                udcFieldInfoTxtDiv.setAttribute("id", "udcFieldInfoTxtDiv");
                                var udcfText = document.createElement("p");
                                udcfText.setAttribute("id", "udcfText");
                                udcfText.innerHTML = dataOBJ.TheHotDogs[i].HotDogType;
                                udcFieldInfoTxtDiv.appendChild(udcfText); //Append text to Div
                                udContainerDiv.appendChild(udcFieldInfoTxtDiv); //Append infoDiv to container

                                //Create Condiment info section
                                var condimentsString = ""; //Declare string to display Condiments
                                var udcFieldInfoTxtDiv = document.createElement("div");
                                udcFieldInfoTxtDiv.setAttribute("id", "udcFieldInfoTxtDiv");
                                var udcfText = document.createElement("p");
                                udcfText.setAttribute("id", "udcfText");
                                udcfText.innerHTML = "Condiment";
                                udcFieldInfoTxtDiv.appendChild(udcfText); //Append text to Div
                                udContainerDiv.appendChild(udcFieldInfoTxtDiv); //Append infoDiv to container
                                var udcFieldInfoTxtDiv = document.createElement("div");
                                udcFieldInfoTxtDiv.setAttribute("id", "udcFieldInfoTxtDiv");
                                var udcfText = document.createElement("p");
                                udcfText.setAttribute("id", "udcfText");
                                if (dataOBJ.TheHotDogs[i].Condiments.length == 0){
                                    console.log("DEBUG: This Hamburger has no condiments.");
                                    condimentsString = "No condiments";
                                    udcfText.innerHTML = condimentsString
                                } else {
                                    for (var n = 0; n < dataOBJ.TheHotDogs[i].Condiments.length; n++){
                                        condimentsString = condimentsString + dataOBJ.TheHotDogs[i].Condiments[n] + " ";
                                    }
                                    udcfText.innerHTML = condimentsString
                                }
                                udcFieldInfoTxtDiv.appendChild(udcfText); //Append text to Div
                                udContainerDiv.appendChild(udcFieldInfoTxtDiv); //Append infoDiv to container

                                //Create Calories info section
                                var udcFieldInfoTxtDiv = document.createElement("div");
                                udcFieldInfoTxtDiv.setAttribute("id", "udcFieldInfoTxtDiv");
                                var udcfText = document.createElement("p");
                                udcfText.setAttribute("id", "udcfText");
                                udcfText.innerHTML = "Calories";
                                udcFieldInfoTxtDiv.appendChild(udcfText); //Append text to Div
                                udContainerDiv.appendChild(udcFieldInfoTxtDiv); //Append infoDiv to container
                                var udcFieldInfoTxtDiv = document.createElement("div");
                                udcFieldInfoTxtDiv.setAttribute("id", "udcFieldInfoTxtDiv");
                                var udcfText = document.createElement("p");
                                udcfText.setAttribute("id", "udcfText");
                                udcfText.innerHTML = dataOBJ.TheHotDogs[i].Calories;
                                udcFieldInfoTxtDiv.appendChild(udcfText); //Append text to Div
                                udContainerDiv.appendChild(udcFieldInfoTxtDiv); //Append infoDiv to container

                                //Create Name info section
                                var udcFieldInfoTxtDiv = document.createElement("div");
                                udcFieldInfoTxtDiv.setAttribute("id", "udcFieldInfoTxtDiv");
                                var udcfText = document.createElement("p");
                                udcfText.setAttribute("id", "udcfText");
                                udcfText.innerHTML = "Name";
                                udcFieldInfoTxtDiv.appendChild(udcfText); //Append text to Div
                                udContainerDiv.appendChild(udcFieldInfoTxtDiv); //Append infoDiv to container
                                var udcFieldInfoTxtDiv = document.createElement("div");
                                udcFieldInfoTxtDiv.setAttribute("id", "udcFieldInfoTxtDiv");
                                var udcfText = document.createElement("p");
                                udcfText.setAttribute("id", "udcfText");
                                udcfText.innerHTML = dataOBJ.TheHotDogs[i].Name;
                                udcFieldInfoTxtDiv.appendChild(udcfText); //Append text to Div
                                udContainerDiv.appendChild(udcFieldInfoTxtDiv); //Append infoDiv to container

                                //Create FoodID section
                                var udcFieldInfoTxtDiv = document.createElement("div");
                                udcFieldInfoTxtDiv.setAttribute("id", "udcFieldInfoTxtDiv");
                                var udcfText = document.createElement("p");
                                udcfText.setAttribute("id", "udcfText");
                                udcfText.innerHTML = "FoodID";
                                udcFieldInfoTxtDiv.appendChild(udcfText); //Append text to Div
                                udContainerDiv.appendChild(udcFieldInfoTxtDiv); //Append infoDiv to container
                                var udcFieldInfoTxtDiv = document.createElement("div");
                                udcFieldInfoTxtDiv.setAttribute("id", "udcFieldInfoTxtDiv");
                                var udcfText = document.createElement("p");
                                udcfText.setAttribute("id", "udcfText");
                                udcfText.innerHTML = dataOBJ.TheHotDogs[i].FoodID;
                                udcFieldInfoTxtDiv.appendChild(udcfText); //Append text to Div
                                udContainerDiv.appendChild(udcFieldInfoTxtDiv); //Append infoDiv to container

                                //Create UserID section
                                var udcFieldInfoTxtDiv = document.createElement("div");
                                udcFieldInfoTxtDiv.setAttribute("id", "udcFieldInfoTxtDiv");
                                var udcfText = document.createElement("p");
                                udcfText.setAttribute("id", "udcfText");
                                udcfText.innerHTML = "UserID";
                                udcFieldInfoTxtDiv.appendChild(udcfText); //Append text to Div
                                udContainerDiv.appendChild(udcFieldInfoTxtDiv); //Append infoDiv to container
                                var udcFieldInfoTxtDiv = document.createElement("div");
                                udcFieldInfoTxtDiv.setAttribute("id", "udcFieldInfoTxtDiv");
                                var udcfText = document.createElement("p");
                                udcfText.setAttribute("id", "udcfText");
                                udcfText.innerHTML = dataOBJ.TheHotDogs[i].UserID;
                                udcFieldInfoTxtDiv.appendChild(udcfText); //Append text to Div
                                udContainerDiv.appendChild(udcFieldInfoTxtDiv); //Append infoDiv to container

                                //Create Photo Section
                                var udcFieldInfoTxtDiv = document.createElement("div");
                                udcFieldInfoTxtDiv.setAttribute("id", "udcFieldInfoTxtDiv");
                                var udcfText = document.createElement("p");
                                udcfText.setAttribute("id", "udcfText");
                                udcfText.innerHTML = "Hotdog Photo";
                                udcFieldInfoTxtDiv.appendChild(udcfText); //Append text to Div
                                udContainerDiv.appendChild(udcFieldInfoTxtDiv); //Append infoDiv to container
                                var udcFieldInfoTxtDiv = document.createElement("div");
                                udcFieldInfoTxtDiv.setAttribute("id", "udcFieldInfoTxtDiv");
                                var udfcPic = document.createElement("img");
                                udfcPic.setAttribute("id", "udfcFeildInfoPic");
                                var photoThere = srcChecker(aHamburger, dataOBJ.TheHotDogs[i], 1); //Check to see if photo exists
                                if (photoThere == true){
                                    console.log("We found the source: " + dataOBJ.TheHotDogs[i].PhotoSrc); //DEBUG
                                    udfcPic.src = String(dataOBJ.TheHotDogs[i].PhotoSrc);
                                    udfcPic.setAttribute("alt", "Food Pic: " + dataOBJ.TheHotDogs[i].PhotoSrc);
                                } else {
                                    console.log("Source not found: " + dataOBJ.TheHotDogs[i].PhotoSrc);
                                    udfcPic.setAttribute("src", "static/images/png/Photo-Unavailable.png");
                                    udfcPic.setAttribute("alt", "Food Pic Not Found.");
                                }
                                udcFieldInfoTxtDiv.appendChild(udfcPic); //Append text to Div
                                udContainerDiv.appendChild(udcFieldInfoTxtDiv); //Append infoDiv to container

                                //Create DateCreated info section
                                var udcFieldInfoTxtDiv = document.createElement("div");
                                udcFieldInfoTxtDiv.setAttribute("id", "udcFieldInfoTxtDiv");
                                var udcfText = document.createElement("p");
                                udcfText.setAttribute("id", "udcfText");
                                udcfText.innerHTML = "DateCreated";
                                udcFieldInfoTxtDiv.appendChild(udcfText); //Append text to Div
                                udContainerDiv.appendChild(udcFieldInfoTxtDiv); //Append infoDiv to container
                                var udcFieldInfoTxtDiv = document.createElement("div");
                                udcFieldInfoTxtDiv.setAttribute("id", "udcFieldInfoTxtDiv");
                                var udcfText = document.createElement("p");
                                udcfText.setAttribute("id", "udcfText");
                                udcfText.innerHTML = dataOBJ.TheHotDogs[i].DateCreated;
                                udcFieldInfoTxtDiv.appendChild(udcfText); //Append text to Div
                                udContainerDiv.appendChild(udcFieldInfoTxtDiv); //Append infoDiv to container

                                //Create DateUpdated info section
                                var udcFieldInfoTxtDiv = document.createElement("div");
                                udcFieldInfoTxtDiv.setAttribute("id", "udcFieldInfoTxtDiv");
                                var udcfText = document.createElement("p");
                                udcfText.setAttribute("id", "udcfText");
                                udcfText.innerHTML = "DateUpdated";
                                udcFieldInfoTxtDiv.appendChild(udcfText); //Append text to Div
                                udContainerDiv.appendChild(udcFieldInfoTxtDiv); //Append infoDiv to container
                                var udcFieldInfoTxtDiv = document.createElement("div");
                                udcFieldInfoTxtDiv.setAttribute("id", "udcFieldInfoTxtDiv");
                                var udcfText = document.createElement("p");
                                udcfText.setAttribute("id", "udcfText");
                                udcfText.innerHTML = dataOBJ.TheHotDogs[i].DateUpdated;
                                udcFieldInfoTxtDiv.appendChild(udcfText); //Append text to Div
                                udContainerDiv.appendChild(udcFieldInfoTxtDiv); //Append infoDiv to container

                                //All the divs fields for the container are added. Add this to the hamseer!
                                hdogSeerDiv.appendChild(udContainerDiv);

                            }
                            hdogSeerDiv.style.display = "block"; //Display the formattted Hotdog divs
                        }
                        
                        foodUpdater.style.display = "block"; //Display the foodUpdater div

                    } else {
                        //No data retrieved
                        console.log("Either User has no data or no data could be retrieved.");
                        alert("Either User has no data or no data could be retrieved.");
                        //DEBUG: PRINT A MESSAGE TO USER HERE.
                    } 
                }
            });
            xhr.send(jsonString);
        });

        //Call the food deleter function to run a query and delete food,(if the selection is appropriate)
        foodDeleteBtn.addEventListener("click", function(){
            //Declare input variable names to work with
            var foodChoice = document.getElementById("foodChoice");
            var foodID = document.getElementById("foodID");
            var userIDElement = document.getElementById("theUserID");
            var theUserID = Number(userIDElement.value);
            
            //Assign fields to pass to food deleter
            if (foodChoice.value == "hotdog"){
                //See if the foodID field was assigned correctly
                if (Number(foodID.value) <= 0){
                    //bad selection
                    console.log("User inputted a wrong selection: " + foodID.value);
                    alert("Please enter a foodID listed below.");
                    //location.reload(true);
                } else {    
                    //Good Selection
                    var foodNumber = Number(foodID.value);
                    foodDeleter(foodChoice.value, foodNumber, theUserID);
                }
            } else if (foodChoice.value == "hamburger"){
                //See if the foodID field was assigned correctly
                if (Number(foodID.value) <= 0){
                    //bad selection
                    console.log("User inputted a wrong selection: " + foodID.value);
                    alert("Please enter a foodID listed below.");
                } else {    
                    //Good Selection
                    var foodNumber = Number(foodID.value);
                    foodDeleter(foodChoice.value, foodNumber, theUserID);
                }
            } else {
                console.log("Error, User selected nothing in the foodchoice" +
                " field or wrong value got put in place.");
                alert("Please select hamburger or hotdog food to delete.");
                location.reload(true);
            }
        });
        //Update food upon the correct selection
        foodUpdateBtn.addEventListener("click", function(){
            //Declare input variable names to work with
            var hadPhoto = document.getElementById("hiddenHasPhoto"); //HiddenPhotoValue
            var foodIDNumber = document.getElementById("foodID"); //foodID Numb
            var photoInput = document.getElementById("photo-update-input"); //Photo Input
            var updatePicForm = document.getElementById("update-picture-form"); //The photo form
            /* CHECK TO SEE IF THERE'S A PHOTO SUBMITTED TO CHANGE */
            var photoSubmission = fileUploadCheck();
            if (photoSubmission == true){
                //Begin process of submitting submitted photo for an update
                hadPhoto.value = "has_photo";
            } else {
                hadPhoto.value = "no_photo"; //Change to no photo form type and remove photoinput before submission
                //updatePicForm.setAttribute("enctype", "application/x-www-form-urlencoded");
                photoInput.parentNode.removeChild(photoInput);
            }
            /* UPDATE CERTAIN FIELDS FOR PROCESSESING */
            var theUserID = document.getElementById("hiddenUserID"); //Hidden User ID
            var enteredUserID = document.getElementById("theUserID"); //UserID enterd by IT or Admin User
            //Check to see if a User ID was entered for an update
            if (Number(enteredUserID.value) <= 0) {
                theUserID.value = userID; // NEED TO DO THIS FOR THE USER
            } else {
                theUserID.value = enteredUserID.value; // NEED TO DO THIS FOR THE USER
            }
            var theUpdateForm = document.getElementById("update-picture-form"); //Update Form

            //Assign fields to pass to food changer
            if (foodChoice.value == "hotdog"){
                //See if the foodID field was assigned correctly
                if (Number(foodIDNumber.value) <= 0){
                    //bad selection
                    alert("Please enter a foodID listed below.");
                    location.reload(true);
                } else {    
                    //Good Selection
                    theUpdateForm.submit();
                }
            } else if (foodChoice.value == "hamburger"){
                //See if the foodID field was assigned correctly
                if (Number(foodIDNumber) <= 0){
                    //bad selection
                    alert("Please enter a foodID listed below.");
                    location.reload(true);
                } else {    
                    //Good Selection
                    theUpdateForm.submit();
                }
            } else {
                console.log("Error, User selected nothing in the foodchoice" +
                " field or wrong value got put in place.");
                alert("Please select hamburger or hotdog food to update.");
                location.reload(true);
            }
        });
        //Hide all foods
        hideFoodButton.addEventListener("click", function(){
            location.reload(true);
        });
    </script>
{{end}}
{{/* ENDING OF IT ACTION PAGE */}}
{{/******** END OF BODY SECTION ********/}}

{{/******* BEGINNING OF FOOTER SECTION ******/}}
{{define "footer_div"}}
    <footer>
        <div class="footer_ContactDiv">
            {{/******** Define both clickable links to other pages ********/}}
            <div class="theContactDiv" onclick="navigateHeader(5)">
                <p class="contactP">Back to Login</p>
            </div>
        </div>
    </footer>
{{end}}
{{/******** END OF FOOTER SECTION *******/}}

{{/* AJAX/ JAVASCRIPT BEGINNING */}}
{{/* Food Executor */}}
{{define "foodExecutor"}}
    <script type="text/javascript">
        getUserID({{.}});
    </script>
{{end}}
{{define "portExecutor"}}
    <script>
        getPort({{.}});
    </script>
{{end}}
{{define "mainHeaderDisplay"}}
    <script type="text/javascript">
        var hiddenP = document.getElementById("HiddenMessageP");
        var hiddenPTwo = document.getElementById("HiddenMessageP2");
        var hiddenPThree = document.getElementById("HiddenMessageP3");
        var hiddenPValue = String(hiddenP.innerHTML);
        var hiddenPValueTwo = Number(hiddenPTwo.innerHTML);
        var hiddenPValueThree = Number(hiddenPThree.innerHTML);
        getOtherHeaderValues(hiddenPValue, hiddenPValueTwo, hiddenPValueThree);
    </script>
{{end}}
{{/* Food Seer */}}
{{define "foodSeer"}}
    <script type="text/javascript">
        getUserID({{.}});
    </script>
{{end}}
{{/* AJAX/ JAVASCRIPT ENDING */}}

{{/* BEGINNING OF CHOICE PAGE BODY */}}
{{define "pageChoiceBody"}}
    <div class="buttonChoiceDivs"  id="buttonChoiceDivs">
        <div class="buttonChoiceDiv" id="buttonChoiceDiv">
            <button class="buttonChoiceButton" id="buttonChoiceButton" onclick="navigateHeader(3)">
                Go to Database
            </button>
        </div>
        <div class="buttonChoiceDiv" id="buttonChoiceDiv">
            <button class="buttonChoiceButton" id="buttonChoiceButton" onclick="navigateHeader(4)">
                Go to MessageBoard
            </button>
        </div>
    </div>
{{end}}
{{/* END OF CHOICE PAGE BODY */}}
{{/* TEST TEMPLATE BEGINNING */}}

{{/* TEST TEMPLATE ENDING */}}
