PURPOSE: This is an app for testing the following: 
1. Creation of a web page with a User sign on,(with pages you cannot 
access without a session ID and proper login credentails in our
database).
2. The creation of a MongoDB, with CRUD operations made through 
restful API calls.
2.5(optional). The creation of a MySQL database with CRUD operations 
made through a restful API call.
3. A display of DB information in a concise, neat format,
displayed using Golang's WebDev tutorial.
4. Use of docker to deploy this app on an Amazon Web Server,
(along with MongoDB).


TO BE DONE: 

1.Create App with User sign on:
User sign in seems to be working, now I need to have a log out function.

2. Create MongoDB functionality:

2.5(optional) Create mySQL functionality

3. Display DB information through go webDev 

4. Deploy this webApp to AWS with Docker 





EXTERIOR NOTES:
1. Errors in Chrome Values for sytlesheets...apprently we need to switch the 'type' to something:
https://github.com/froala/angular-froala/issues/170. I'm not quite sure this is the correct fix...
Okay no, THIS is the correct fix: https://golangcode.com/serve-static-assets-using-the-mux-router/

2. Credentials for Amazon SQLDB creation.
DB Master Username: joek1
Password: fartghookthestrong69
VPC Group: food-security
Port: 3306
Schema: food-database-schema
EndPoint: food-database.cd8ujtto1hfj.us-east-2.rds.amazonaws.com
In the future, set the 'publicly accessible' tag to NO. Also, you can't use the MySQl on the work machine, it 
refuses the connection...probobly a company policy thing
Click little Database Icon for a new 'Schema'
Create the schema, open it, then right click tables, new table to create a table
For MySQl, we need to go get these packages: go get github.com/go-sql-driver/mysql
the structure for the database opening is below: 
db, err = sql.Open("mysql", "databaseUsername:the-database-password@tcp(the-amazon-database-endpoint:portNum-3306)/schemaName?charset=utf8")
https://github.com/go-sql-driver/mysql/wiki/Examples
Once you wanna do error handling, follow this: https://stackoverflow.com/questions/27644009/handling-dynamic-errors-in-go-specifically-database-sql-package

3. Here's the RIGHT WAY to use insert statements with Golang mySQL:
https://www.golangprograms.com/example-of-golang-crud-using-mysql-from-scratch.html

4. Role Definition
A User can: 1. See ALL of the hotdogs/hamburgers they made, and can update THEIR hamburgers or hotdogs.
2. Delete any Hotdogs/Hamburgers THEY made. 3. Add a hotdog or a Hamburger to THEIR list 

5. Creating an Amazon Web Instance of this app: 
1. Creating an Amazon Instance: https://www.udemy.com/course/go-programming-language/learn/lecture/6162772#overview
KeyPair(Make sure you chmod 400 this, first!):
 D:\Go_Workspace\src\superUltimateDBWebApp\superUltimateDBWebApp\security\kp-superDB.pem
KeyPair Login: ssh -i /d/goworkspace/src/superUltimateDBWebApp/superUltimateDBWebApp/security/kp-superDB.pem ubuntu@ec2-3-135-9-238.us-east-2.compute.amazonaws.com
To 'Secure Copy' a file into our server:
scp -i /d/goworkspace/src/superUltimateDBWebApp/superUltimateDBWebApp/security/kp-superDB.pem superdbautogentest3 ubuntu@ec2-3-135-9-238.us-east-2.compute.amazonaws.com:
//DON'T FORGET THAT COLON AT THE END, IT PUTS THE FILE IN THE ROOT DIRECTORY
// You should be able to see it when logging in and typing ls
//To build your binary for Ubuntu:
GOOS=linux GOARCH=amd64 go build (maybe add this to change the name: -o mybinaryname) and a . to get all in that directory.
//Make sure to sudo chmod 777 your binary
//To run, type sudo ./your binary

2. Creating a Docker GoLang Image: https://www.udemy.com/course/go-programming-language/learn/lecture/6404232#overview

3. Uploading a docker image to Amazon: https://www.udemy.com/course/go-programming-language/learn/lecture/6404238#overview
If you can log onto the ubuntu server, first update packages: sudo apt-get update -y && sudo apt-get upgrade -y 
WARNING, ACCORDING TO THIS, UBUNTU MACHINES DON'T REALLY USE YUM:
https://stackoverflow.com/questions/20120973/yum-fails-with-there-are-no-enabled-repos
OR you can get yum. First: https://zoomadmin.com/HowToInstall/UbuntuPackage/yum
Then: run sudo yum update -y 
Install docker with Yum: sudo yum install -y docker
HOW TO INSTALL DOCKER ON UBUNTU 18.4: https://www.digitalocean.com/community/tutorials/how-to-install-and-use-docker-on-ubuntu-18-04
For using using docker commands without Sudo on Ubuntu, you might have to substitute user name with ubuntu

IMPORTANT DOCKER TEXT:
FOR BUILDING A PROPER DOCKER FILE: https://www.youtube.com/watch?v=RSSwZt1c1Yo&feature=youtu.be
BUILD AN EXECUTEABLE WITH A UNIQUE NAME: https://stackoverflow.com/questions/42706246/how-to-build-executable-with-name-other-than-golang-package
DOCKER CONTAINTER COMMANDS: https://www.callicoder.com/docker-golang-image-container-example/
NOTE: Make sure packages are up to date! Try doing this VS Code Trick first:
https://stackoverflow.com/questions/58518588/vscode-could-not-import-golang-package
Docker Ubuntu installation: https://docs.docker.com/engine/install/ubuntu/
docker build -t testdbbinary .

New found factiods:
1. Passing variables to Javascript: https://stackoverflow.com/questions/37426563/pass-golang-variables-into-javascript
2. For building binaries with Go Web Dev, you should use the hell out of something called Packr! Otherwise, 
your binary won't run correctly when you run it in different places because it can't find the files you want to parse!
https://blog.gobuffalo.io/packr-v2-0-0-rc-3-introduction-7a5e06a688c5 //PackerV2
https://github.com/gobuffalo/packr/issues/16
https://pkg.go.dev/github.com/gobuffalo/packr/v2/packr2?tab=overview
after running packr2 -v and making a change to the project, you might need to run 
packr2 clean and run packr2 -v again to update your changes
Running all Go files into a binary: https://stackoverflow.com/questions/10838469/how-to-compile-go-program-consisting-of-multiple-files/61793820#61793820
To build ALL go files, try running  GOOS=linux GOARCH=amd64 packr2 build -o superdbautogentest3 . //You get all files in a directory, PLUS the name flag

Enabling Cronjobs on Linux Systems: 
https://www.digitalocean.com/community/tutorials/how-to-use-cron-to-automate-tasks-ubuntu-1804

Crontab examples:
https://www.youtube.com/watch?v=QZJ1drMQz1A

MongoDB Notes:
Warning! You need to be careful when using a VPN. MongoDB only allows connections from certain IPS for the
cloud, unless you have some stuff set up with Amazon...
Good examples: https://blog.ruanbekker.com/blog/2019/04/17/mongodb-examples-with-golang/#:~:text=Connecting%20to%20MongoDB%20in%20Golang&text=package%20main%20import%20(%20%22context%22,main()%20%7B%20clientOptions%20%3A%3D%20options.
Important workaround for driver connections! You need to use Java string!
https://stackoverflow.com/questions/55660134/cant-connect-to-mongo-cloud-mongodb-database-in-golang-on-ubuntu